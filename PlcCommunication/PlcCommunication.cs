// Generated by ProtoGen, Version=0.9.0.0, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PlcCommunication {
  
  public static partial class PlcCommunication {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static PlcCommunication() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Enums
  public enum COMMAND {
    NOP = 0,
    DROP_CONNECTION = 1,
    RELOAD_CONFIGURATION = 2,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class IdRange : pb::GeneratedMessageLite<IdRange, IdRange.Builder> {
    private static readonly IdRange defaultInstance = new Builder().BuildPartial();
    public static IdRange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IdRange DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override IdRange ThisMessage {
      get { return this; }
    }
    
    public const int TailIdFieldNumber = 1;
    private bool hasTailId;
    private int tailId_ = 0;
    public bool HasTailId {
      get { return hasTailId; }
    }
    public int TailId {
      get { return tailId_; }
    }
    
    public const int HeadIdFieldNumber = 2;
    private bool hasHeadId;
    private int headId_ = 0;
    public bool HasHeadId {
      get { return hasHeadId; }
    }
    public int HeadId {
      get { return headId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTailId) {
        output.WriteInt32(1, TailId);
      }
      if (HasHeadId) {
        output.WriteInt32(2, HeadId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTailId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TailId);
        }
        if (HasHeadId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, HeadId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTailId) hash ^= tailId_.GetHashCode();
      if (hasHeadId) hash ^= headId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      IdRange other = obj as IdRange;
      if (other == null) return false;
      if (hasTailId != other.hasTailId || (hasTailId && !tailId_.Equals(other.tailId_))) return false;
      if (hasHeadId != other.hasHeadId || (hasHeadId && !headId_.Equals(other.headId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("TailId", hasTailId, tailId_, writer);
      PrintField("HeadId", hasHeadId, headId_, writer);
    }
    #endregion
    
    public static IdRange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IdRange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IdRange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IdRange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IdRange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IdRange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IdRange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IdRange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IdRange ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IdRange ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IdRange prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<IdRange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      IdRange result = new IdRange();
      
      protected override IdRange MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new IdRange();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override IdRange DefaultInstanceForType {
        get { return global::PlcCommunication.IdRange.DefaultInstance; }
      }
      
      public override IdRange BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        IdRange returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is IdRange) {
          return MergeFrom((IdRange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IdRange other) {
        if (other == global::PlcCommunication.IdRange.DefaultInstance) return this;
        if (other.HasTailId) {
          TailId = other.TailId;
        }
        if (other.HasHeadId) {
          HeadId = other.HeadId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              TailId = input.ReadInt32();
              break;
            }
            case 16: {
              HeadId = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasTailId {
        get { return result.HasTailId; }
      }
      public int TailId {
        get { return result.TailId; }
        set { SetTailId(value); }
      }
      public Builder SetTailId(int value) {
        result.hasTailId = true;
        result.tailId_ = value;
        return this;
      }
      public Builder ClearTailId() {
        result.hasTailId = false;
        result.tailId_ = 0;
        return this;
      }
      
      public bool HasHeadId {
        get { return result.HasHeadId; }
      }
      public int HeadId {
        get { return result.HeadId; }
        set { SetHeadId(value); }
      }
      public Builder SetHeadId(int value) {
        result.hasHeadId = true;
        result.headId_ = value;
        return this;
      }
      public Builder ClearHeadId() {
        result.hasHeadId = false;
        result.headId_ = 0;
        return this;
      }
    }
    static IdRange() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class SignalAndValue : pb::GeneratedMessageLite<SignalAndValue, SignalAndValue.Builder> {
    private static readonly SignalAndValue defaultInstance = new Builder().BuildPartial();
    public static SignalAndValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SignalAndValue DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SignalAndValue ThisMessage {
      get { return this; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_ = 0;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public const int UserIdFieldNumber = 3;
    private bool hasUserId;
    private int userId_ = 0;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasName) {
        output.WriteString(1, Name);
      }
      if (HasValue) {
        output.WriteInt32(2, Value);
      }
      if (HasUserId) {
        output.WriteInt32(3, UserId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (HasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
        }
        if (HasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, UserId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasValue) hash ^= value_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      SignalAndValue other = obj as SignalAndValue;
      if (other == null) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Name", hasName, name_, writer);
      PrintField("Value", hasValue, value_, writer);
      PrintField("UserId", hasUserId, userId_, writer);
    }
    #endregion
    
    public static SignalAndValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignalAndValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignalAndValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignalAndValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignalAndValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignalAndValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SignalAndValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SignalAndValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SignalAndValue ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignalAndValue ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SignalAndValue prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<SignalAndValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SignalAndValue result = new SignalAndValue();
      
      protected override SignalAndValue MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SignalAndValue();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override SignalAndValue DefaultInstanceForType {
        get { return global::PlcCommunication.SignalAndValue.DefaultInstance; }
      }
      
      public override SignalAndValue BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SignalAndValue returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is SignalAndValue) {
          return MergeFrom((SignalAndValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SignalAndValue other) {
        if (other == global::PlcCommunication.SignalAndValue.DefaultInstance) return this;
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 16: {
              Value = input.ReadInt32();
              break;
            }
            case 24: {
              UserId = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.HasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.HasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
    }
    static SignalAndValue() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class DatabaseRow : pb::GeneratedMessageLite<DatabaseRow, DatabaseRow.Builder> {
    private static readonly DatabaseRow defaultInstance = new Builder().BuildPartial();
    public static DatabaseRow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DatabaseRow DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DatabaseRow ThisMessage {
      get { return this; }
    }
    
    public const int RowIdFieldNumber = 1;
    private bool hasRowId;
    private int rowId_ = 0;
    public bool HasRowId {
      get { return hasRowId; }
    }
    public int RowId {
      get { return rowId_; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int TimeMsFieldNumber = 3;
    private bool hasTimeMs;
    private long timeMs_ = 0L;
    public bool HasTimeMs {
      get { return hasTimeMs; }
    }
    public long TimeMs {
      get { return timeMs_; }
    }
    
    public const int SignalValuesFieldNumber = 4;
    private bool hasSignalValues;
    private pb::ByteString signalValues_ = pb::ByteString.Empty;
    public bool HasSignalValues {
      get { return hasSignalValues; }
    }
    public pb::ByteString SignalValues {
      get { return signalValues_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasRowId) {
        output.WriteInt32(1, RowId);
      }
      if (HasVersion) {
        output.WriteInt32(2, Version);
      }
      if (HasTimeMs) {
        output.WriteInt64(3, TimeMs);
      }
      if (HasSignalValues) {
        output.WriteBytes(4, SignalValues);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasRowId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RowId);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (HasTimeMs) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, TimeMs);
        }
        if (HasSignalValues) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, SignalValues);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRowId) hash ^= rowId_.GetHashCode();
      if (hasVersion) hash ^= version_.GetHashCode();
      if (hasTimeMs) hash ^= timeMs_.GetHashCode();
      if (hasSignalValues) hash ^= signalValues_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      DatabaseRow other = obj as DatabaseRow;
      if (other == null) return false;
      if (hasRowId != other.hasRowId || (hasRowId && !rowId_.Equals(other.rowId_))) return false;
      if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
      if (hasTimeMs != other.hasTimeMs || (hasTimeMs && !timeMs_.Equals(other.timeMs_))) return false;
      if (hasSignalValues != other.hasSignalValues || (hasSignalValues && !signalValues_.Equals(other.signalValues_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("RowId", hasRowId, rowId_, writer);
      PrintField("Version", hasVersion, version_, writer);
      PrintField("TimeMs", hasTimeMs, timeMs_, writer);
      PrintField("SignalValues", hasSignalValues, signalValues_, writer);
    }
    #endregion
    
    public static DatabaseRow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DatabaseRow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DatabaseRow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DatabaseRow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DatabaseRow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DatabaseRow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DatabaseRow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DatabaseRow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DatabaseRow ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DatabaseRow ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DatabaseRow prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<DatabaseRow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DatabaseRow result = new DatabaseRow();
      
      protected override DatabaseRow MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DatabaseRow();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override DatabaseRow DefaultInstanceForType {
        get { return global::PlcCommunication.DatabaseRow.DefaultInstance; }
      }
      
      public override DatabaseRow BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DatabaseRow returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is DatabaseRow) {
          return MergeFrom((DatabaseRow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DatabaseRow other) {
        if (other == global::PlcCommunication.DatabaseRow.DefaultInstance) return this;
        if (other.HasRowId) {
          RowId = other.RowId;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasTimeMs) {
          TimeMs = other.TimeMs;
        }
        if (other.HasSignalValues) {
          SignalValues = other.SignalValues;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              RowId = input.ReadInt32();
              break;
            }
            case 16: {
              Version = input.ReadInt32();
              break;
            }
            case 24: {
              TimeMs = input.ReadInt64();
              break;
            }
            case 34: {
              SignalValues = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasRowId {
        get { return result.HasRowId; }
      }
      public int RowId {
        get { return result.RowId; }
        set { SetRowId(value); }
      }
      public Builder SetRowId(int value) {
        result.hasRowId = true;
        result.rowId_ = value;
        return this;
      }
      public Builder ClearRowId() {
        result.hasRowId = false;
        result.rowId_ = 0;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasTimeMs {
        get { return result.HasTimeMs; }
      }
      public long TimeMs {
        get { return result.TimeMs; }
        set { SetTimeMs(value); }
      }
      public Builder SetTimeMs(long value) {
        result.hasTimeMs = true;
        result.timeMs_ = value;
        return this;
      }
      public Builder ClearTimeMs() {
        result.hasTimeMs = false;
        result.timeMs_ = 0L;
        return this;
      }
      
      public bool HasSignalValues {
        get { return result.HasSignalValues; }
      }
      public pb::ByteString SignalValues {
        get { return result.SignalValues; }
        set { SetSignalValues(value); }
      }
      public Builder SetSignalValues(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSignalValues = true;
        result.signalValues_ = value;
        return this;
      }
      public Builder ClearSignalValues() {
        result.hasSignalValues = false;
        result.signalValues_ = pb::ByteString.Empty;
        return this;
      }
    }
    static DatabaseRow() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class RowUser : pb::GeneratedMessageLite<RowUser, RowUser.Builder> {
    private static readonly RowUser defaultInstance = new Builder().BuildPartial();
    public static RowUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RowUser DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RowUser ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int CreateDateFieldNumber = 2;
    private bool hasCreateDate;
    private long createDate_ = 0L;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public long CreateDate {
      get { return createDate_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int IsPublicFieldNumber = 5;
    private bool hasIsPublic;
    private bool isPublic_ = false;
    public bool HasIsPublic {
      get { return hasIsPublic; }
    }
    public bool IsPublic {
      get { return isPublic_; }
    }
    
    public const int CredentialsFieldNumber = 6;
    private bool hasCredentials;
    private string credentials_ = "";
    public bool HasCredentials {
      get { return hasCredentials; }
    }
    public string Credentials {
      get { return credentials_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt32(1, Id);
      }
      if (HasCreateDate) {
        output.WriteInt64(2, CreateDate);
      }
      if (HasName) {
        output.WriteString(3, Name);
      }
      if (HasType) {
        output.WriteString(4, Type);
      }
      if (HasIsPublic) {
        output.WriteBool(5, IsPublic);
      }
      if (HasCredentials) {
        output.WriteString(6, Credentials);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (HasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, CreateDate);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Type);
        }
        if (HasIsPublic) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, IsPublic);
        }
        if (HasCredentials) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Credentials);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasCreateDate) hash ^= createDate_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasIsPublic) hash ^= isPublic_.GetHashCode();
      if (hasCredentials) hash ^= credentials_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RowUser other = obj as RowUser;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasCreateDate != other.hasCreateDate || (hasCreateDate && !createDate_.Equals(other.createDate_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasIsPublic != other.hasIsPublic || (hasIsPublic && !isPublic_.Equals(other.isPublic_))) return false;
      if (hasCredentials != other.hasCredentials || (hasCredentials && !credentials_.Equals(other.credentials_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Id", hasId, id_, writer);
      PrintField("CreateDate", hasCreateDate, createDate_, writer);
      PrintField("Name", hasName, name_, writer);
      PrintField("Type", hasType, type_, writer);
      PrintField("IsPublic", hasIsPublic, isPublic_, writer);
      PrintField("Credentials", hasCredentials, credentials_, writer);
    }
    #endregion
    
    public static RowUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RowUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RowUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RowUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RowUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RowUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RowUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RowUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RowUser ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RowUser ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RowUser prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<RowUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RowUser result = new RowUser();
      
      protected override RowUser MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RowUser();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override RowUser DefaultInstanceForType {
        get { return global::PlcCommunication.RowUser.DefaultInstance; }
      }
      
      public override RowUser BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RowUser returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RowUser) {
          return MergeFrom((RowUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RowUser other) {
        if (other == global::PlcCommunication.RowUser.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasIsPublic) {
          IsPublic = other.IsPublic;
        }
        if (other.HasCredentials) {
          Credentials = other.Credentials;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              Id = input.ReadInt32();
              break;
            }
            case 16: {
              CreateDate = input.ReadInt64();
              break;
            }
            case 26: {
              Name = input.ReadString();
              break;
            }
            case 34: {
              Type = input.ReadString();
              break;
            }
            case 40: {
              IsPublic = input.ReadBool();
              break;
            }
            case 50: {
              Credentials = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.HasCreateDate; }
      }
      public long CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(long value) {
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        result.hasCreateDate = false;
        result.createDate_ = 0L;
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.HasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasIsPublic {
        get { return result.HasIsPublic; }
      }
      public bool IsPublic {
        get { return result.IsPublic; }
        set { SetIsPublic(value); }
      }
      public Builder SetIsPublic(bool value) {
        result.hasIsPublic = true;
        result.isPublic_ = value;
        return this;
      }
      public Builder ClearIsPublic() {
        result.hasIsPublic = false;
        result.isPublic_ = false;
        return this;
      }
      
      public bool HasCredentials {
        get { return result.HasCredentials; }
      }
      public string Credentials {
        get { return result.Credentials; }
        set { SetCredentials(value); }
      }
      public Builder SetCredentials(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCredentials = true;
        result.credentials_ = value;
        return this;
      }
      public Builder ClearCredentials() {
        result.hasCredentials = false;
        result.credentials_ = "";
        return this;
      }
    }
    static RowUser() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class RowPlcConfiguration : pb::GeneratedMessageLite<RowPlcConfiguration, RowPlcConfiguration.Builder> {
    private static readonly RowPlcConfiguration defaultInstance = new Builder().BuildPartial();
    public static RowPlcConfiguration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RowPlcConfiguration DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RowPlcConfiguration ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int UserIdFieldNumber = 2;
    private bool hasUserId;
    private int userId_ = 0;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public const int UserSessionIdFieldNumber = 3;
    private bool hasUserSessionId;
    private int userSessionId_ = 0;
    public bool HasUserSessionId {
      get { return hasUserSessionId; }
    }
    public int UserSessionId {
      get { return userSessionId_; }
    }
    
    public const int CreateDateFieldNumber = 4;
    private bool hasCreateDate;
    private long createDate_ = 0L;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public long CreateDate {
      get { return createDate_; }
    }
    
    public const int VersionFieldNumber = 5;
    private bool hasVersion;
    private int version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int ConfigurationFileFieldNumber = 6;
    private bool hasConfigurationFile;
    private pb::ByteString configurationFile_ = pb::ByteString.Empty;
    public bool HasConfigurationFile {
      get { return hasConfigurationFile; }
    }
    public pb::ByteString ConfigurationFile {
      get { return configurationFile_; }
    }
    
    public const int PreferencesFieldNumber = 7;
    private bool hasPreferences;
    private pb::ByteString preferences_ = pb::ByteString.Empty;
    public bool HasPreferences {
      get { return hasPreferences; }
    }
    public pb::ByteString Preferences {
      get { return preferences_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt32(1, Id);
      }
      if (HasUserId) {
        output.WriteInt32(2, UserId);
      }
      if (HasUserSessionId) {
        output.WriteInt32(3, UserSessionId);
      }
      if (HasCreateDate) {
        output.WriteInt64(4, CreateDate);
      }
      if (HasVersion) {
        output.WriteInt32(5, Version);
      }
      if (HasConfigurationFile) {
        output.WriteBytes(6, ConfigurationFile);
      }
      if (HasPreferences) {
        output.WriteBytes(7, Preferences);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (HasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, UserId);
        }
        if (HasUserSessionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, UserSessionId);
        }
        if (HasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, CreateDate);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Version);
        }
        if (HasConfigurationFile) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, ConfigurationFile);
        }
        if (HasPreferences) {
          size += pb::CodedOutputStream.ComputeBytesSize(7, Preferences);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasUserSessionId) hash ^= userSessionId_.GetHashCode();
      if (hasCreateDate) hash ^= createDate_.GetHashCode();
      if (hasVersion) hash ^= version_.GetHashCode();
      if (hasConfigurationFile) hash ^= configurationFile_.GetHashCode();
      if (hasPreferences) hash ^= preferences_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RowPlcConfiguration other = obj as RowPlcConfiguration;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasUserSessionId != other.hasUserSessionId || (hasUserSessionId && !userSessionId_.Equals(other.userSessionId_))) return false;
      if (hasCreateDate != other.hasCreateDate || (hasCreateDate && !createDate_.Equals(other.createDate_))) return false;
      if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
      if (hasConfigurationFile != other.hasConfigurationFile || (hasConfigurationFile && !configurationFile_.Equals(other.configurationFile_))) return false;
      if (hasPreferences != other.hasPreferences || (hasPreferences && !preferences_.Equals(other.preferences_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Id", hasId, id_, writer);
      PrintField("UserId", hasUserId, userId_, writer);
      PrintField("UserSessionId", hasUserSessionId, userSessionId_, writer);
      PrintField("CreateDate", hasCreateDate, createDate_, writer);
      PrintField("Version", hasVersion, version_, writer);
      PrintField("ConfigurationFile", hasConfigurationFile, configurationFile_, writer);
      PrintField("Preferences", hasPreferences, preferences_, writer);
    }
    #endregion
    
    public static RowPlcConfiguration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RowPlcConfiguration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RowPlcConfiguration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RowPlcConfiguration ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RowPlcConfiguration prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<RowPlcConfiguration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RowPlcConfiguration result = new RowPlcConfiguration();
      
      protected override RowPlcConfiguration MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RowPlcConfiguration();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override RowPlcConfiguration DefaultInstanceForType {
        get { return global::PlcCommunication.RowPlcConfiguration.DefaultInstance; }
      }
      
      public override RowPlcConfiguration BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RowPlcConfiguration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RowPlcConfiguration) {
          return MergeFrom((RowPlcConfiguration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RowPlcConfiguration other) {
        if (other == global::PlcCommunication.RowPlcConfiguration.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasUserSessionId) {
          UserSessionId = other.UserSessionId;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasConfigurationFile) {
          ConfigurationFile = other.ConfigurationFile;
        }
        if (other.HasPreferences) {
          Preferences = other.Preferences;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              Id = input.ReadInt32();
              break;
            }
            case 16: {
              UserId = input.ReadInt32();
              break;
            }
            case 24: {
              UserSessionId = input.ReadInt32();
              break;
            }
            case 32: {
              CreateDate = input.ReadInt64();
              break;
            }
            case 40: {
              Version = input.ReadInt32();
              break;
            }
            case 50: {
              ConfigurationFile = input.ReadBytes();
              break;
            }
            case 58: {
              Preferences = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.HasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasUserSessionId {
        get { return result.HasUserSessionId; }
      }
      public int UserSessionId {
        get { return result.UserSessionId; }
        set { SetUserSessionId(value); }
      }
      public Builder SetUserSessionId(int value) {
        result.hasUserSessionId = true;
        result.userSessionId_ = value;
        return this;
      }
      public Builder ClearUserSessionId() {
        result.hasUserSessionId = false;
        result.userSessionId_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.HasCreateDate; }
      }
      public long CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(long value) {
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        result.hasCreateDate = false;
        result.createDate_ = 0L;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasConfigurationFile {
        get { return result.HasConfigurationFile; }
      }
      public pb::ByteString ConfigurationFile {
        get { return result.ConfigurationFile; }
        set { SetConfigurationFile(value); }
      }
      public Builder SetConfigurationFile(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasConfigurationFile = true;
        result.configurationFile_ = value;
        return this;
      }
      public Builder ClearConfigurationFile() {
        result.hasConfigurationFile = false;
        result.configurationFile_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasPreferences {
        get { return result.HasPreferences; }
      }
      public pb::ByteString Preferences {
        get { return result.Preferences; }
        set { SetPreferences(value); }
      }
      public Builder SetPreferences(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPreferences = true;
        result.preferences_ = value;
        return this;
      }
      public Builder ClearPreferences() {
        result.hasPreferences = false;
        result.preferences_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RowPlcConfiguration() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class Configuration : pb::GeneratedMessageLite<Configuration, Configuration.Builder> {
    private static readonly Configuration defaultInstance = new Builder().BuildPartial();
    public static Configuration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Configuration DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Configuration ThisMessage {
      get { return this; }
    }
    
    public const int DeviceIdFieldNumber = 1;
    private bool hasDeviceId;
    private string deviceId_ = "";
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    public string DeviceId {
      get { return deviceId_; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int ConfigurationFileFieldNumber = 3;
    private bool hasConfigurationFile;
    private pb::ByteString configurationFile_ = pb::ByteString.Empty;
    public bool HasConfigurationFile {
      get { return hasConfigurationFile; }
    }
    public pb::ByteString ConfigurationFile {
      get { return configurationFile_; }
    }
    
    public const int PasswordFieldNumber = 4;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int PreferencesFieldNumber = 5;
    private bool hasPreferences;
    private pb::ByteString preferences_ = pb::ByteString.Empty;
    public bool HasPreferences {
      get { return hasPreferences; }
    }
    public pb::ByteString Preferences {
      get { return preferences_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasDeviceId) {
        output.WriteString(1, DeviceId);
      }
      if (HasVersion) {
        output.WriteInt32(2, Version);
      }
      if (HasConfigurationFile) {
        output.WriteBytes(3, ConfigurationFile);
      }
      if (HasPassword) {
        output.WriteString(4, Password);
      }
      if (HasPreferences) {
        output.WriteBytes(5, Preferences);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasDeviceId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, DeviceId);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (HasConfigurationFile) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ConfigurationFile);
        }
        if (HasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Password);
        }
        if (HasPreferences) {
          size += pb::CodedOutputStream.ComputeBytesSize(5, Preferences);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasDeviceId) hash ^= deviceId_.GetHashCode();
      if (hasVersion) hash ^= version_.GetHashCode();
      if (hasConfigurationFile) hash ^= configurationFile_.GetHashCode();
      if (hasPassword) hash ^= password_.GetHashCode();
      if (hasPreferences) hash ^= preferences_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Configuration other = obj as Configuration;
      if (other == null) return false;
      if (hasDeviceId != other.hasDeviceId || (hasDeviceId && !deviceId_.Equals(other.deviceId_))) return false;
      if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
      if (hasConfigurationFile != other.hasConfigurationFile || (hasConfigurationFile && !configurationFile_.Equals(other.configurationFile_))) return false;
      if (hasPassword != other.hasPassword || (hasPassword && !password_.Equals(other.password_))) return false;
      if (hasPreferences != other.hasPreferences || (hasPreferences && !preferences_.Equals(other.preferences_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("DeviceId", hasDeviceId, deviceId_, writer);
      PrintField("Version", hasVersion, version_, writer);
      PrintField("ConfigurationFile", hasConfigurationFile, configurationFile_, writer);
      PrintField("Password", hasPassword, password_, writer);
      PrintField("Preferences", hasPreferences, preferences_, writer);
    }
    #endregion
    
    public static Configuration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Configuration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Configuration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Configuration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Configuration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Configuration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Configuration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Configuration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Configuration ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Configuration ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Configuration prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<Configuration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Configuration result = new Configuration();
      
      protected override Configuration MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Configuration();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override Configuration DefaultInstanceForType {
        get { return global::PlcCommunication.Configuration.DefaultInstance; }
      }
      
      public override Configuration BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Configuration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Configuration) {
          return MergeFrom((Configuration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Configuration other) {
        if (other == global::PlcCommunication.Configuration.DefaultInstance) return this;
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasConfigurationFile) {
          ConfigurationFile = other.ConfigurationFile;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasPreferences) {
          Preferences = other.Preferences;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 10: {
              DeviceId = input.ReadString();
              break;
            }
            case 16: {
              Version = input.ReadInt32();
              break;
            }
            case 26: {
              ConfigurationFile = input.ReadBytes();
              break;
            }
            case 34: {
              Password = input.ReadString();
              break;
            }
            case 42: {
              Preferences = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasDeviceId {
        get { return result.HasDeviceId; }
      }
      public string DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      public Builder SetDeviceId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        result.hasDeviceId = false;
        result.deviceId_ = "";
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasConfigurationFile {
        get { return result.HasConfigurationFile; }
      }
      public pb::ByteString ConfigurationFile {
        get { return result.ConfigurationFile; }
        set { SetConfigurationFile(value); }
      }
      public Builder SetConfigurationFile(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasConfigurationFile = true;
        result.configurationFile_ = value;
        return this;
      }
      public Builder ClearConfigurationFile() {
        result.hasConfigurationFile = false;
        result.configurationFile_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasPassword {
        get { return result.HasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasPreferences {
        get { return result.HasPreferences; }
      }
      public pb::ByteString Preferences {
        get { return result.Preferences; }
        set { SetPreferences(value); }
      }
      public Builder SetPreferences(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPreferences = true;
        result.preferences_ = value;
        return this;
      }
      public Builder ClearPreferences() {
        result.hasPreferences = false;
        result.preferences_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Configuration() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class Response : pb::GeneratedMessageLite<Response, Response.Builder> {
    private static readonly Response defaultInstance = new Builder().BuildPartial();
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Response DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Response ThisMessage {
      get { return this; }
    }
    
    public const int OKFieldNumber = 1;
    private bool hasOK;
    private bool oK_ = false;
    public bool HasOK {
      get { return hasOK; }
    }
    public bool OK {
      get { return oK_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOK) {
        output.WriteBool(1, OK);
      }
      if (HasMessage) {
        output.WriteString(2, Message);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOK) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, OK);
        }
        if (HasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Message);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasOK) hash ^= oK_.GetHashCode();
      if (hasMessage) hash ^= message_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Response other = obj as Response;
      if (other == null) return false;
      if (hasOK != other.hasOK || (hasOK && !oK_.Equals(other.oK_))) return false;
      if (hasMessage != other.hasMessage || (hasMessage && !message_.Equals(other.message_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("OK", hasOK, oK_, writer);
      PrintField("Message", hasMessage, message_, writer);
    }
    #endregion
    
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Response result = new Response();
      
      protected override Response MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Response();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override Response DefaultInstanceForType {
        get { return global::PlcCommunication.Response.DefaultInstance; }
      }
      
      public override Response BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Response returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Response other) {
        if (other == global::PlcCommunication.Response.DefaultInstance) return this;
        if (other.HasOK) {
          OK = other.OK;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              OK = input.ReadBool();
              break;
            }
            case 18: {
              Message = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasOK {
        get { return result.HasOK; }
      }
      public bool OK {
        get { return result.OK; }
        set { SetOK(value); }
      }
      public Builder SetOK(bool value) {
        result.hasOK = true;
        result.oK_ = value;
        return this;
      }
      public Builder ClearOK() {
        result.hasOK = false;
        result.oK_ = false;
        return this;
      }
      
      public bool HasMessage {
        get { return result.HasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class DbRangeQuery : pb::GeneratedMessageLite<DbRangeQuery, DbRangeQuery.Builder> {
    private static readonly DbRangeQuery defaultInstance = new Builder().BuildPartial();
    public static DbRangeQuery DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DbRangeQuery DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DbRangeQuery ThisMessage {
      get { return this; }
    }
    
    public const int FirstTimeTicksFieldNumber = 1;
    private bool hasFirstTimeTicks;
    private long firstTimeTicks_ = 0L;
    public bool HasFirstTimeTicks {
      get { return hasFirstTimeTicks; }
    }
    public long FirstTimeTicks {
      get { return firstTimeTicks_; }
    }
    
    public const int LastTimeTicksFieldNumber = 2;
    private bool hasLastTimeTicks;
    private long lastTimeTicks_ = 0L;
    public bool HasLastTimeTicks {
      get { return hasLastTimeTicks; }
    }
    public long LastTimeTicks {
      get { return lastTimeTicks_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFirstTimeTicks) {
        output.WriteInt64(1, FirstTimeTicks);
      }
      if (HasLastTimeTicks) {
        output.WriteInt64(2, LastTimeTicks);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFirstTimeTicks) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, FirstTimeTicks);
        }
        if (HasLastTimeTicks) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, LastTimeTicks);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasFirstTimeTicks) hash ^= firstTimeTicks_.GetHashCode();
      if (hasLastTimeTicks) hash ^= lastTimeTicks_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      DbRangeQuery other = obj as DbRangeQuery;
      if (other == null) return false;
      if (hasFirstTimeTicks != other.hasFirstTimeTicks || (hasFirstTimeTicks && !firstTimeTicks_.Equals(other.firstTimeTicks_))) return false;
      if (hasLastTimeTicks != other.hasLastTimeTicks || (hasLastTimeTicks && !lastTimeTicks_.Equals(other.lastTimeTicks_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("FirstTimeTicks", hasFirstTimeTicks, firstTimeTicks_, writer);
      PrintField("LastTimeTicks", hasLastTimeTicks, lastTimeTicks_, writer);
    }
    #endregion
    
    public static DbRangeQuery ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DbRangeQuery ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DbRangeQuery ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DbRangeQuery ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DbRangeQuery prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<DbRangeQuery, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DbRangeQuery result = new DbRangeQuery();
      
      protected override DbRangeQuery MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DbRangeQuery();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override DbRangeQuery DefaultInstanceForType {
        get { return global::PlcCommunication.DbRangeQuery.DefaultInstance; }
      }
      
      public override DbRangeQuery BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DbRangeQuery returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is DbRangeQuery) {
          return MergeFrom((DbRangeQuery) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DbRangeQuery other) {
        if (other == global::PlcCommunication.DbRangeQuery.DefaultInstance) return this;
        if (other.HasFirstTimeTicks) {
          FirstTimeTicks = other.FirstTimeTicks;
        }
        if (other.HasLastTimeTicks) {
          LastTimeTicks = other.LastTimeTicks;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              FirstTimeTicks = input.ReadInt64();
              break;
            }
            case 16: {
              LastTimeTicks = input.ReadInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasFirstTimeTicks {
        get { return result.HasFirstTimeTicks; }
      }
      public long FirstTimeTicks {
        get { return result.FirstTimeTicks; }
        set { SetFirstTimeTicks(value); }
      }
      public Builder SetFirstTimeTicks(long value) {
        result.hasFirstTimeTicks = true;
        result.firstTimeTicks_ = value;
        return this;
      }
      public Builder ClearFirstTimeTicks() {
        result.hasFirstTimeTicks = false;
        result.firstTimeTicks_ = 0L;
        return this;
      }
      
      public bool HasLastTimeTicks {
        get { return result.HasLastTimeTicks; }
      }
      public long LastTimeTicks {
        get { return result.LastTimeTicks; }
        set { SetLastTimeTicks(value); }
      }
      public Builder SetLastTimeTicks(long value) {
        result.hasLastTimeTicks = true;
        result.lastTimeTicks_ = value;
        return this;
      }
      public Builder ClearLastTimeTicks() {
        result.hasLastTimeTicks = false;
        result.lastTimeTicks_ = 0L;
        return this;
      }
    }
    static DbRangeQuery() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class MessageToPlc : pb::GeneratedMessageLite<MessageToPlc, MessageToPlc.Builder> {
    private static readonly MessageToPlc defaultInstance = new Builder().BuildPartial();
    public static MessageToPlc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageToPlc DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MessageToPlc ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_ = 0L;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int SetSignalsFieldNumber = 2;
    private pbc::PopsicleList<global::PlcCommunication.SignalAndValue> setSignals_ = new pbc::PopsicleList<global::PlcCommunication.SignalAndValue>();
    public scg::IList<global::PlcCommunication.SignalAndValue> SetSignalsList {
      get { return setSignals_; }
    }
    public int SetSignalsCount {
      get { return setSignals_.Count; }
    }
    public global::PlcCommunication.SignalAndValue GetSetSignals(int index) {
      return setSignals_[index];
    }
    
    public const int QueryDatabaseRowsFieldNumber = 3;
    private bool hasQueryDatabaseRows;
    private global::PlcCommunication.IdRange queryDatabaseRows_ = global::PlcCommunication.IdRange.DefaultInstance;
    public bool HasQueryDatabaseRows {
      get { return hasQueryDatabaseRows; }
    }
    public global::PlcCommunication.IdRange QueryDatabaseRows {
      get { return queryDatabaseRows_; }
    }
    
    public const int MonitorUsersFieldNumber = 4;
    private pbc::PopsicleList<int> monitorUsers_ = new pbc::PopsicleList<int>();
    public scg::IList<int> MonitorUsersList {
      get { return pbc::Lists.AsReadOnly(monitorUsers_); }
    }
    public int MonitorUsersCount {
      get { return monitorUsers_.Count; }
    }
    public int GetMonitorUsers(int index) {
      return monitorUsers_[index];
    }
    
    public const int ForwardToPlcIdFieldNumber = 5;
    private bool hasForwardToPlcId;
    private int forwardToPlcId_ = 0;
    public bool HasForwardToPlcId {
      get { return hasForwardToPlcId; }
    }
    public int ForwardToPlcId {
      get { return forwardToPlcId_; }
    }
    
    public const int SourceUserIdFieldNumber = 6;
    private bool hasSourceUserId;
    private int sourceUserId_ = 0;
    public bool HasSourceUserId {
      get { return hasSourceUserId; }
    }
    public int SourceUserId {
      get { return sourceUserId_; }
    }
    
    public const int QueryLatestRowPlcConfigurationFieldNumber = 7;
    private bool hasQueryLatestRowPlcConfiguration;
    private int queryLatestRowPlcConfiguration_ = 0;
    public bool HasQueryLatestRowPlcConfiguration {
      get { return hasQueryLatestRowPlcConfiguration; }
    }
    public int QueryLatestRowPlcConfiguration {
      get { return queryLatestRowPlcConfiguration_; }
    }
    
    public const int NewRowPlcConfigurationFieldNumber = 8;
    private bool hasNewRowPlcConfiguration;
    private global::PlcCommunication.RowPlcConfiguration newRowPlcConfiguration_ = global::PlcCommunication.RowPlcConfiguration.DefaultInstance;
    public bool HasNewRowPlcConfiguration {
      get { return hasNewRowPlcConfiguration; }
    }
    public global::PlcCommunication.RowPlcConfiguration NewRowPlcConfiguration {
      get { return newRowPlcConfiguration_; }
    }
    
    public const int CommandFieldNumber = 9;
    private bool hasCommand;
    private global::PlcCommunication.COMMAND command_ = global::PlcCommunication.COMMAND.NOP;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::PlcCommunication.COMMAND Command {
      get { return command_; }
    }
    
    public const int TargetPlcIdFieldNumber = 10;
    private bool hasTargetPlcId;
    private int targetPlcId_ = 0;
    public bool HasTargetPlcId {
      get { return hasTargetPlcId; }
    }
    public int TargetPlcId {
      get { return targetPlcId_; }
    }
    
    public const int QueryDbRangeFieldNumber = 11;
    private bool hasQueryDbRange;
    private global::PlcCommunication.DbRangeQuery queryDbRange_ = global::PlcCommunication.DbRangeQuery.DefaultInstance;
    public bool HasQueryDbRange {
      get { return hasQueryDbRange; }
    }
    public global::PlcCommunication.DbRangeQuery QueryDbRange {
      get { return queryDbRange_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt64(1, Id);
      }
      foreach (global::PlcCommunication.SignalAndValue element in SetSignalsList) {
        output.WriteMessage(2, element);
      }
      if (HasQueryDatabaseRows) {
        output.WriteMessage(3, QueryDatabaseRows);
      }
      if (monitorUsers_.Count > 0) {
        foreach (int element in monitorUsers_) {
          output.WriteInt32(4, element);
        }
      }
      if (HasForwardToPlcId) {
        output.WriteInt32(5, ForwardToPlcId);
      }
      if (HasSourceUserId) {
        output.WriteInt32(6, SourceUserId);
      }
      if (HasQueryLatestRowPlcConfiguration) {
        output.WriteInt32(7, QueryLatestRowPlcConfiguration);
      }
      if (HasNewRowPlcConfiguration) {
        output.WriteMessage(8, NewRowPlcConfiguration);
      }
      if (HasCommand) {
        output.WriteEnum(9, (int) Command);
      }
      if (HasTargetPlcId) {
        output.WriteInt32(10, TargetPlcId);
      }
      if (HasQueryDbRange) {
        output.WriteMessage(11, QueryDbRange);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
        }
        foreach (global::PlcCommunication.SignalAndValue element in SetSignalsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (HasQueryDatabaseRows) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, QueryDatabaseRows);
        }
        {
          int dataSize = 0;
          foreach (int element in MonitorUsersList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * monitorUsers_.Count;
        }
        if (HasForwardToPlcId) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ForwardToPlcId);
        }
        if (HasSourceUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SourceUserId);
        }
        if (HasQueryLatestRowPlcConfiguration) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, QueryLatestRowPlcConfiguration);
        }
        if (HasNewRowPlcConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, NewRowPlcConfiguration);
        }
        if (HasCommand) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Command);
        }
        if (HasTargetPlcId) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, TargetPlcId);
        }
        if (HasQueryDbRange) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, QueryDbRange);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(global::PlcCommunication.SignalAndValue i in setSignals_)
        hash ^= i.GetHashCode();
      if (hasQueryDatabaseRows) hash ^= queryDatabaseRows_.GetHashCode();
      foreach(int i in monitorUsers_)
        hash ^= i.GetHashCode();
      if (hasForwardToPlcId) hash ^= forwardToPlcId_.GetHashCode();
      if (hasSourceUserId) hash ^= sourceUserId_.GetHashCode();
      if (hasQueryLatestRowPlcConfiguration) hash ^= queryLatestRowPlcConfiguration_.GetHashCode();
      if (hasNewRowPlcConfiguration) hash ^= newRowPlcConfiguration_.GetHashCode();
      if (hasCommand) hash ^= command_.GetHashCode();
      if (hasTargetPlcId) hash ^= targetPlcId_.GetHashCode();
      if (hasQueryDbRange) hash ^= queryDbRange_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      MessageToPlc other = obj as MessageToPlc;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(setSignals_.Count != other.setSignals_.Count) return false;
      for(int ix=0; ix < setSignals_.Count; ix++)
        if(!setSignals_[ix].Equals(other.setSignals_[ix])) return false;
      if (hasQueryDatabaseRows != other.hasQueryDatabaseRows || (hasQueryDatabaseRows && !queryDatabaseRows_.Equals(other.queryDatabaseRows_))) return false;
      if(monitorUsers_.Count != other.monitorUsers_.Count) return false;
      for(int ix=0; ix < monitorUsers_.Count; ix++)
        if(!monitorUsers_[ix].Equals(other.monitorUsers_[ix])) return false;
      if (hasForwardToPlcId != other.hasForwardToPlcId || (hasForwardToPlcId && !forwardToPlcId_.Equals(other.forwardToPlcId_))) return false;
      if (hasSourceUserId != other.hasSourceUserId || (hasSourceUserId && !sourceUserId_.Equals(other.sourceUserId_))) return false;
      if (hasQueryLatestRowPlcConfiguration != other.hasQueryLatestRowPlcConfiguration || (hasQueryLatestRowPlcConfiguration && !queryLatestRowPlcConfiguration_.Equals(other.queryLatestRowPlcConfiguration_))) return false;
      if (hasNewRowPlcConfiguration != other.hasNewRowPlcConfiguration || (hasNewRowPlcConfiguration && !newRowPlcConfiguration_.Equals(other.newRowPlcConfiguration_))) return false;
      if (hasCommand != other.hasCommand || (hasCommand && !command_.Equals(other.command_))) return false;
      if (hasTargetPlcId != other.hasTargetPlcId || (hasTargetPlcId && !targetPlcId_.Equals(other.targetPlcId_))) return false;
      if (hasQueryDbRange != other.hasQueryDbRange || (hasQueryDbRange && !queryDbRange_.Equals(other.queryDbRange_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Id", hasId, id_, writer);
      PrintField("SetSignals", setSignals_, writer);
      PrintField("QueryDatabaseRows", hasQueryDatabaseRows, queryDatabaseRows_, writer);
      PrintField("MonitorUsers", monitorUsers_, writer);
      PrintField("ForwardToPlcId", hasForwardToPlcId, forwardToPlcId_, writer);
      PrintField("SourceUserId", hasSourceUserId, sourceUserId_, writer);
      PrintField("QueryLatestRowPlcConfiguration", hasQueryLatestRowPlcConfiguration, queryLatestRowPlcConfiguration_, writer);
      PrintField("NewRowPlcConfiguration", hasNewRowPlcConfiguration, newRowPlcConfiguration_, writer);
      PrintField("Command", hasCommand, command_, writer);
      PrintField("TargetPlcId", hasTargetPlcId, targetPlcId_, writer);
      PrintField("QueryDbRange", hasQueryDbRange, queryDbRange_, writer);
    }
    #endregion
    
    public static MessageToPlc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageToPlc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageToPlc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageToPlc ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageToPlc ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageToPlc prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<MessageToPlc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MessageToPlc result = new MessageToPlc();
      
      protected override MessageToPlc MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MessageToPlc();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override MessageToPlc DefaultInstanceForType {
        get { return global::PlcCommunication.MessageToPlc.DefaultInstance; }
      }
      
      public override MessageToPlc BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.setSignals_.MakeReadOnly();
        result.monitorUsers_.MakeReadOnly();
        MessageToPlc returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is MessageToPlc) {
          return MergeFrom((MessageToPlc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageToPlc other) {
        if (other == global::PlcCommunication.MessageToPlc.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.setSignals_.Count != 0) {
          base.AddRange(other.setSignals_, result.setSignals_);
        }
        if (other.HasQueryDatabaseRows) {
          MergeQueryDatabaseRows(other.QueryDatabaseRows);
        }
        if (other.monitorUsers_.Count != 0) {
          base.AddRange(other.monitorUsers_, result.monitorUsers_);
        }
        if (other.HasForwardToPlcId) {
          ForwardToPlcId = other.ForwardToPlcId;
        }
        if (other.HasSourceUserId) {
          SourceUserId = other.SourceUserId;
        }
        if (other.HasQueryLatestRowPlcConfiguration) {
          QueryLatestRowPlcConfiguration = other.QueryLatestRowPlcConfiguration;
        }
        if (other.HasNewRowPlcConfiguration) {
          MergeNewRowPlcConfiguration(other.NewRowPlcConfiguration);
        }
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.HasTargetPlcId) {
          TargetPlcId = other.TargetPlcId;
        }
        if (other.HasQueryDbRange) {
          MergeQueryDbRange(other.QueryDbRange);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              Id = input.ReadInt64();
              break;
            }
            case 18: {
              global::PlcCommunication.SignalAndValue.Builder subBuilder = global::PlcCommunication.SignalAndValue.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSetSignals(subBuilder.BuildPartial());
              break;
            }
            case 26: {
              global::PlcCommunication.IdRange.Builder subBuilder = global::PlcCommunication.IdRange.CreateBuilder();
              if (HasQueryDatabaseRows) {
                subBuilder.MergeFrom(QueryDatabaseRows);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QueryDatabaseRows = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              AddMonitorUsers(input.ReadInt32());
              break;
            }
            case 40: {
              ForwardToPlcId = input.ReadInt32();
              break;
            }
            case 48: {
              SourceUserId = input.ReadInt32();
              break;
            }
            case 56: {
              QueryLatestRowPlcConfiguration = input.ReadInt32();
              break;
            }
            case 66: {
              global::PlcCommunication.RowPlcConfiguration.Builder subBuilder = global::PlcCommunication.RowPlcConfiguration.CreateBuilder();
              if (HasNewRowPlcConfiguration) {
                subBuilder.MergeFrom(NewRowPlcConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewRowPlcConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::PlcCommunication.COMMAND), rawValue)) {
              } else {
                Command = (global::PlcCommunication.COMMAND) rawValue;
              }
              break;
            }
            case 80: {
              TargetPlcId = input.ReadInt32();
              break;
            }
            case 90: {
              global::PlcCommunication.DbRangeQuery.Builder subBuilder = global::PlcCommunication.DbRangeQuery.CreateBuilder();
              if (HasQueryDbRange) {
                subBuilder.MergeFrom(QueryDbRange);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QueryDbRange = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::PlcCommunication.SignalAndValue> SetSignalsList {
        get { return result.setSignals_; }
      }
      public int SetSignalsCount {
        get { return result.SetSignalsCount; }
      }
      public global::PlcCommunication.SignalAndValue GetSetSignals(int index) {
        return result.GetSetSignals(index);
      }
      public Builder SetSetSignals(int index, global::PlcCommunication.SignalAndValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.setSignals_[index] = value;
        return this;
      }
      public Builder SetSetSignals(int index, global::PlcCommunication.SignalAndValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.setSignals_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSetSignals(global::PlcCommunication.SignalAndValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.setSignals_.Add(value);
        return this;
      }
      public Builder AddSetSignals(global::PlcCommunication.SignalAndValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.setSignals_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSetSignals(scg::IEnumerable<global::PlcCommunication.SignalAndValue> values) {
        base.AddRange(values, result.setSignals_);
        return this;
      }
      public Builder ClearSetSignals() {
        result.setSignals_.Clear();
        return this;
      }
      
      public bool HasQueryDatabaseRows {
       get { return result.HasQueryDatabaseRows; }
      }
      public global::PlcCommunication.IdRange QueryDatabaseRows {
        get { return result.QueryDatabaseRows; }
        set { SetQueryDatabaseRows(value); }
      }
      public Builder SetQueryDatabaseRows(global::PlcCommunication.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasQueryDatabaseRows = true;
        result.queryDatabaseRows_ = value;
        return this;
      }
      public Builder SetQueryDatabaseRows(global::PlcCommunication.IdRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasQueryDatabaseRows = true;
        result.queryDatabaseRows_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQueryDatabaseRows(global::PlcCommunication.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasQueryDatabaseRows &&
            result.queryDatabaseRows_ != global::PlcCommunication.IdRange.DefaultInstance) {
            result.queryDatabaseRows_ = global::PlcCommunication.IdRange.CreateBuilder(result.queryDatabaseRows_).MergeFrom(value).BuildPartial();
        } else {
          result.queryDatabaseRows_ = value;
        }
        result.hasQueryDatabaseRows = true;
        return this;
      }
      public Builder ClearQueryDatabaseRows() {
        result.hasQueryDatabaseRows = false;
        result.queryDatabaseRows_ = global::PlcCommunication.IdRange.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> MonitorUsersList {
        get { return result.monitorUsers_; }
      }
      public int MonitorUsersCount {
        get { return result.MonitorUsersCount; }
      }
      public int GetMonitorUsers(int index) {
        return result.GetMonitorUsers(index);
      }
      public Builder SetMonitorUsers(int index, int value) {
        result.monitorUsers_[index] = value;
        return this;
      }
      public Builder AddMonitorUsers(int value) {
        result.monitorUsers_.Add(value);
        return this;
      }
      public Builder AddRangeMonitorUsers(scg::IEnumerable<int> values) {
        base.AddRange(values, result.monitorUsers_);
        return this;
      }
      public Builder ClearMonitorUsers() {
        result.monitorUsers_.Clear();
        return this;
      }
      
      public bool HasForwardToPlcId {
        get { return result.HasForwardToPlcId; }
      }
      public int ForwardToPlcId {
        get { return result.ForwardToPlcId; }
        set { SetForwardToPlcId(value); }
      }
      public Builder SetForwardToPlcId(int value) {
        result.hasForwardToPlcId = true;
        result.forwardToPlcId_ = value;
        return this;
      }
      public Builder ClearForwardToPlcId() {
        result.hasForwardToPlcId = false;
        result.forwardToPlcId_ = 0;
        return this;
      }
      
      public bool HasSourceUserId {
        get { return result.HasSourceUserId; }
      }
      public int SourceUserId {
        get { return result.SourceUserId; }
        set { SetSourceUserId(value); }
      }
      public Builder SetSourceUserId(int value) {
        result.hasSourceUserId = true;
        result.sourceUserId_ = value;
        return this;
      }
      public Builder ClearSourceUserId() {
        result.hasSourceUserId = false;
        result.sourceUserId_ = 0;
        return this;
      }
      
      public bool HasQueryLatestRowPlcConfiguration {
        get { return result.HasQueryLatestRowPlcConfiguration; }
      }
      public int QueryLatestRowPlcConfiguration {
        get { return result.QueryLatestRowPlcConfiguration; }
        set { SetQueryLatestRowPlcConfiguration(value); }
      }
      public Builder SetQueryLatestRowPlcConfiguration(int value) {
        result.hasQueryLatestRowPlcConfiguration = true;
        result.queryLatestRowPlcConfiguration_ = value;
        return this;
      }
      public Builder ClearQueryLatestRowPlcConfiguration() {
        result.hasQueryLatestRowPlcConfiguration = false;
        result.queryLatestRowPlcConfiguration_ = 0;
        return this;
      }
      
      public bool HasNewRowPlcConfiguration {
       get { return result.HasNewRowPlcConfiguration; }
      }
      public global::PlcCommunication.RowPlcConfiguration NewRowPlcConfiguration {
        get { return result.NewRowPlcConfiguration; }
        set { SetNewRowPlcConfiguration(value); }
      }
      public Builder SetNewRowPlcConfiguration(global::PlcCommunication.RowPlcConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNewRowPlcConfiguration = true;
        result.newRowPlcConfiguration_ = value;
        return this;
      }
      public Builder SetNewRowPlcConfiguration(global::PlcCommunication.RowPlcConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasNewRowPlcConfiguration = true;
        result.newRowPlcConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewRowPlcConfiguration(global::PlcCommunication.RowPlcConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasNewRowPlcConfiguration &&
            result.newRowPlcConfiguration_ != global::PlcCommunication.RowPlcConfiguration.DefaultInstance) {
            result.newRowPlcConfiguration_ = global::PlcCommunication.RowPlcConfiguration.CreateBuilder(result.newRowPlcConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.newRowPlcConfiguration_ = value;
        }
        result.hasNewRowPlcConfiguration = true;
        return this;
      }
      public Builder ClearNewRowPlcConfiguration() {
        result.hasNewRowPlcConfiguration = false;
        result.newRowPlcConfiguration_ = global::PlcCommunication.RowPlcConfiguration.DefaultInstance;
        return this;
      }
      
      public bool HasCommand {
       get { return result.HasCommand; }
      }
      public global::PlcCommunication.COMMAND Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::PlcCommunication.COMMAND value) {
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        result.hasCommand = false;
        result.command_ = global::PlcCommunication.COMMAND.NOP;
        return this;
      }
      
      public bool HasTargetPlcId {
        get { return result.HasTargetPlcId; }
      }
      public int TargetPlcId {
        get { return result.TargetPlcId; }
        set { SetTargetPlcId(value); }
      }
      public Builder SetTargetPlcId(int value) {
        result.hasTargetPlcId = true;
        result.targetPlcId_ = value;
        return this;
      }
      public Builder ClearTargetPlcId() {
        result.hasTargetPlcId = false;
        result.targetPlcId_ = 0;
        return this;
      }
      
      public bool HasQueryDbRange {
       get { return result.HasQueryDbRange; }
      }
      public global::PlcCommunication.DbRangeQuery QueryDbRange {
        get { return result.QueryDbRange; }
        set { SetQueryDbRange(value); }
      }
      public Builder SetQueryDbRange(global::PlcCommunication.DbRangeQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasQueryDbRange = true;
        result.queryDbRange_ = value;
        return this;
      }
      public Builder SetQueryDbRange(global::PlcCommunication.DbRangeQuery.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasQueryDbRange = true;
        result.queryDbRange_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQueryDbRange(global::PlcCommunication.DbRangeQuery value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasQueryDbRange &&
            result.queryDbRange_ != global::PlcCommunication.DbRangeQuery.DefaultInstance) {
            result.queryDbRange_ = global::PlcCommunication.DbRangeQuery.CreateBuilder(result.queryDbRange_).MergeFrom(value).BuildPartial();
        } else {
          result.queryDbRange_ = value;
        }
        result.hasQueryDbRange = true;
        return this;
      }
      public Builder ClearQueryDbRange() {
        result.hasQueryDbRange = false;
        result.queryDbRange_ = global::PlcCommunication.DbRangeQuery.DefaultInstance;
        return this;
      }
    }
    static MessageToPlc() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  public sealed partial class MessageFromPlc : pb::GeneratedMessageLite<MessageFromPlc, MessageFromPlc.Builder> {
    private static readonly MessageFromPlc defaultInstance = new Builder().BuildPartial();
    public static MessageFromPlc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageFromPlc DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MessageFromPlc ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int ResponseFieldNumber = 2;
    private bool hasResponse;
    private global::PlcCommunication.Response response_ = global::PlcCommunication.Response.DefaultInstance;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::PlcCommunication.Response Response {
      get { return response_; }
    }
    
    public const int OOBDatabaseRowFieldNumber = 3;
    private bool hasOOBDatabaseRow;
    private global::PlcCommunication.DatabaseRow oOBDatabaseRow_ = global::PlcCommunication.DatabaseRow.DefaultInstance;
    public bool HasOOBDatabaseRow {
      get { return hasOOBDatabaseRow; }
    }
    public global::PlcCommunication.DatabaseRow OOBDatabaseRow {
      get { return oOBDatabaseRow_; }
    }
    
    public const int OOBConfigurationFieldNumber = 4;
    private bool hasOOBConfiguration;
    private global::PlcCommunication.Configuration oOBConfiguration_ = global::PlcCommunication.Configuration.DefaultInstance;
    public bool HasOOBConfiguration {
      get { return hasOOBConfiguration; }
    }
    public global::PlcCommunication.Configuration OOBConfiguration {
      get { return oOBConfiguration_; }
    }
    
    public const int OOBDatabaseRangeFieldNumber = 5;
    private bool hasOOBDatabaseRange;
    private global::PlcCommunication.IdRange oOBDatabaseRange_ = global::PlcCommunication.IdRange.DefaultInstance;
    public bool HasOOBDatabaseRange {
      get { return hasOOBDatabaseRange; }
    }
    public global::PlcCommunication.IdRange OOBDatabaseRange {
      get { return oOBDatabaseRange_; }
    }
    
    public const int ResponseToDatabaseRowsFieldNumber = 6;
    private pbc::PopsicleList<global::PlcCommunication.DatabaseRow> responseToDatabaseRows_ = new pbc::PopsicleList<global::PlcCommunication.DatabaseRow>();
    public scg::IList<global::PlcCommunication.DatabaseRow> ResponseToDatabaseRowsList {
      get { return responseToDatabaseRows_; }
    }
    public int ResponseToDatabaseRowsCount {
      get { return responseToDatabaseRows_.Count; }
    }
    public global::PlcCommunication.DatabaseRow GetResponseToDatabaseRows(int index) {
      return responseToDatabaseRows_[index];
    }
    
    public const int CommandFieldNumber = 7;
    private bool hasCommand;
    private global::PlcCommunication.COMMAND command_ = global::PlcCommunication.COMMAND.NOP;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::PlcCommunication.COMMAND Command {
      get { return command_; }
    }
    
    public const int OOBRowUsersFieldNumber = 8;
    private pbc::PopsicleList<global::PlcCommunication.RowUser> oOBRowUsers_ = new pbc::PopsicleList<global::PlcCommunication.RowUser>();
    public scg::IList<global::PlcCommunication.RowUser> OOBRowUsersList {
      get { return oOBRowUsers_; }
    }
    public int OOBRowUsersCount {
      get { return oOBRowUsers_.Count; }
    }
    public global::PlcCommunication.RowUser GetOOBRowUsers(int index) {
      return oOBRowUsers_[index];
    }
    
    public const int SourceIdFieldNumber = 9;
    private bool hasSourceId;
    private int sourceId_ = 0;
    public bool HasSourceId {
      get { return hasSourceId; }
    }
    public int SourceId {
      get { return sourceId_; }
    }
    
    public const int ResponseToQueryLatestRowPlcConfigurationFieldNumber = 10;
    private bool hasResponseToQueryLatestRowPlcConfiguration;
    private global::PlcCommunication.RowPlcConfiguration responseToQueryLatestRowPlcConfiguration_ = global::PlcCommunication.RowPlcConfiguration.DefaultInstance;
    public bool HasResponseToQueryLatestRowPlcConfiguration {
      get { return hasResponseToQueryLatestRowPlcConfiguration; }
    }
    public global::PlcCommunication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration {
      get { return responseToQueryLatestRowPlcConfiguration_; }
    }
    
    public const int ResponseToDbRangeQueryFieldNumber = 11;
    private bool hasResponseToDbRangeQuery;
    private global::PlcCommunication.IdRange responseToDbRangeQuery_ = global::PlcCommunication.IdRange.DefaultInstance;
    public bool HasResponseToDbRangeQuery {
      get { return hasResponseToDbRangeQuery; }
    }
    public global::PlcCommunication.IdRange ResponseToDbRangeQuery {
      get { return responseToDbRangeQuery_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteSInt64(1, Id);
      }
      if (HasResponse) {
        output.WriteMessage(2, Response);
      }
      if (HasOOBDatabaseRow) {
        output.WriteMessage(3, OOBDatabaseRow);
      }
      if (HasOOBConfiguration) {
        output.WriteMessage(4, OOBConfiguration);
      }
      if (HasOOBDatabaseRange) {
        output.WriteMessage(5, OOBDatabaseRange);
      }
      foreach (global::PlcCommunication.DatabaseRow element in ResponseToDatabaseRowsList) {
        output.WriteMessage(6, element);
      }
      if (HasCommand) {
        output.WriteEnum(7, (int) Command);
      }
      foreach (global::PlcCommunication.RowUser element in OOBRowUsersList) {
        output.WriteMessage(8, element);
      }
      if (HasSourceId) {
        output.WriteInt32(9, SourceId);
      }
      if (HasResponseToQueryLatestRowPlcConfiguration) {
        output.WriteMessage(10, ResponseToQueryLatestRowPlcConfiguration);
      }
      if (HasResponseToDbRangeQuery) {
        output.WriteMessage(11, ResponseToDbRangeQuery);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, Id);
        }
        if (HasResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Response);
        }
        if (HasOOBDatabaseRow) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, OOBDatabaseRow);
        }
        if (HasOOBConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, OOBConfiguration);
        }
        if (HasOOBDatabaseRange) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, OOBDatabaseRange);
        }
        foreach (global::PlcCommunication.DatabaseRow element in ResponseToDatabaseRowsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (HasCommand) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) Command);
        }
        foreach (global::PlcCommunication.RowUser element in OOBRowUsersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (HasSourceId) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, SourceId);
        }
        if (HasResponseToQueryLatestRowPlcConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, ResponseToQueryLatestRowPlcConfiguration);
        }
        if (HasResponseToDbRangeQuery) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ResponseToDbRangeQuery);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasResponse) hash ^= response_.GetHashCode();
      if (hasOOBDatabaseRow) hash ^= oOBDatabaseRow_.GetHashCode();
      if (hasOOBConfiguration) hash ^= oOBConfiguration_.GetHashCode();
      if (hasOOBDatabaseRange) hash ^= oOBDatabaseRange_.GetHashCode();
      foreach(global::PlcCommunication.DatabaseRow i in responseToDatabaseRows_)
        hash ^= i.GetHashCode();
      if (hasCommand) hash ^= command_.GetHashCode();
      foreach(global::PlcCommunication.RowUser i in oOBRowUsers_)
        hash ^= i.GetHashCode();
      if (hasSourceId) hash ^= sourceId_.GetHashCode();
      if (hasResponseToQueryLatestRowPlcConfiguration) hash ^= responseToQueryLatestRowPlcConfiguration_.GetHashCode();
      if (hasResponseToDbRangeQuery) hash ^= responseToDbRangeQuery_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      MessageFromPlc other = obj as MessageFromPlc;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasResponse != other.hasResponse || (hasResponse && !response_.Equals(other.response_))) return false;
      if (hasOOBDatabaseRow != other.hasOOBDatabaseRow || (hasOOBDatabaseRow && !oOBDatabaseRow_.Equals(other.oOBDatabaseRow_))) return false;
      if (hasOOBConfiguration != other.hasOOBConfiguration || (hasOOBConfiguration && !oOBConfiguration_.Equals(other.oOBConfiguration_))) return false;
      if (hasOOBDatabaseRange != other.hasOOBDatabaseRange || (hasOOBDatabaseRange && !oOBDatabaseRange_.Equals(other.oOBDatabaseRange_))) return false;
      if(responseToDatabaseRows_.Count != other.responseToDatabaseRows_.Count) return false;
      for(int ix=0; ix < responseToDatabaseRows_.Count; ix++)
        if(!responseToDatabaseRows_[ix].Equals(other.responseToDatabaseRows_[ix])) return false;
      if (hasCommand != other.hasCommand || (hasCommand && !command_.Equals(other.command_))) return false;
      if(oOBRowUsers_.Count != other.oOBRowUsers_.Count) return false;
      for(int ix=0; ix < oOBRowUsers_.Count; ix++)
        if(!oOBRowUsers_[ix].Equals(other.oOBRowUsers_[ix])) return false;
      if (hasSourceId != other.hasSourceId || (hasSourceId && !sourceId_.Equals(other.sourceId_))) return false;
      if (hasResponseToQueryLatestRowPlcConfiguration != other.hasResponseToQueryLatestRowPlcConfiguration || (hasResponseToQueryLatestRowPlcConfiguration && !responseToQueryLatestRowPlcConfiguration_.Equals(other.responseToQueryLatestRowPlcConfiguration_))) return false;
      if (hasResponseToDbRangeQuery != other.hasResponseToDbRangeQuery || (hasResponseToDbRangeQuery && !responseToDbRangeQuery_.Equals(other.responseToDbRangeQuery_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("Id", hasId, id_, writer);
      PrintField("Response", hasResponse, response_, writer);
      PrintField("OOBDatabaseRow", hasOOBDatabaseRow, oOBDatabaseRow_, writer);
      PrintField("OOBConfiguration", hasOOBConfiguration, oOBConfiguration_, writer);
      PrintField("OOBDatabaseRange", hasOOBDatabaseRange, oOBDatabaseRange_, writer);
      PrintField("ResponseToDatabaseRows", responseToDatabaseRows_, writer);
      PrintField("Command", hasCommand, command_, writer);
      PrintField("OOBRowUsers", oOBRowUsers_, writer);
      PrintField("SourceId", hasSourceId, sourceId_, writer);
      PrintField("ResponseToQueryLatestRowPlcConfiguration", hasResponseToQueryLatestRowPlcConfiguration, responseToQueryLatestRowPlcConfiguration_, writer);
      PrintField("ResponseToDbRangeQuery", hasResponseToDbRangeQuery, responseToDbRangeQuery_, writer);
    }
    #endregion
    
    public static MessageFromPlc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageFromPlc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageFromPlc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageFromPlc ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageFromPlc prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<MessageFromPlc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MessageFromPlc result = new MessageFromPlc();
      
      protected override MessageFromPlc MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MessageFromPlc();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override MessageFromPlc DefaultInstanceForType {
        get { return global::PlcCommunication.MessageFromPlc.DefaultInstance; }
      }
      
      public override MessageFromPlc BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.responseToDatabaseRows_.MakeReadOnly();
        result.oOBRowUsers_.MakeReadOnly();
        MessageFromPlc returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is MessageFromPlc) {
          return MergeFrom((MessageFromPlc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageFromPlc other) {
        if (other == global::PlcCommunication.MessageFromPlc.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasOOBDatabaseRow) {
          MergeOOBDatabaseRow(other.OOBDatabaseRow);
        }
        if (other.HasOOBConfiguration) {
          MergeOOBConfiguration(other.OOBConfiguration);
        }
        if (other.HasOOBDatabaseRange) {
          MergeOOBDatabaseRange(other.OOBDatabaseRange);
        }
        if (other.responseToDatabaseRows_.Count != 0) {
          base.AddRange(other.responseToDatabaseRows_, result.responseToDatabaseRows_);
        }
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.oOBRowUsers_.Count != 0) {
          base.AddRange(other.oOBRowUsers_, result.oOBRowUsers_);
        }
        if (other.HasSourceId) {
          SourceId = other.SourceId;
        }
        if (other.HasResponseToQueryLatestRowPlcConfiguration) {
          MergeResponseToQueryLatestRowPlcConfiguration(other.ResponseToQueryLatestRowPlcConfiguration);
        }
        if (other.HasResponseToDbRangeQuery) {
          MergeResponseToDbRangeQuery(other.ResponseToDbRangeQuery);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 8: {
              Id = input.ReadSInt64();
              break;
            }
            case 18: {
              global::PlcCommunication.Response.Builder subBuilder = global::PlcCommunication.Response.CreateBuilder();
              if (HasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::PlcCommunication.DatabaseRow.Builder subBuilder = global::PlcCommunication.DatabaseRow.CreateBuilder();
              if (HasOOBDatabaseRow) {
                subBuilder.MergeFrom(OOBDatabaseRow);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OOBDatabaseRow = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::PlcCommunication.Configuration.Builder subBuilder = global::PlcCommunication.Configuration.CreateBuilder();
              if (HasOOBConfiguration) {
                subBuilder.MergeFrom(OOBConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OOBConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::PlcCommunication.IdRange.Builder subBuilder = global::PlcCommunication.IdRange.CreateBuilder();
              if (HasOOBDatabaseRange) {
                subBuilder.MergeFrom(OOBDatabaseRange);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OOBDatabaseRange = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::PlcCommunication.DatabaseRow.Builder subBuilder = global::PlcCommunication.DatabaseRow.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddResponseToDatabaseRows(subBuilder.BuildPartial());
              break;
            }
            case 56: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::PlcCommunication.COMMAND), rawValue)) {
              } else {
                Command = (global::PlcCommunication.COMMAND) rawValue;
              }
              break;
            }
            case 66: {
              global::PlcCommunication.RowUser.Builder subBuilder = global::PlcCommunication.RowUser.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddOOBRowUsers(subBuilder.BuildPartial());
              break;
            }
            case 72: {
              SourceId = input.ReadInt32();
              break;
            }
            case 82: {
              global::PlcCommunication.RowPlcConfiguration.Builder subBuilder = global::PlcCommunication.RowPlcConfiguration.CreateBuilder();
              if (HasResponseToQueryLatestRowPlcConfiguration) {
                subBuilder.MergeFrom(ResponseToQueryLatestRowPlcConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResponseToQueryLatestRowPlcConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::PlcCommunication.IdRange.Builder subBuilder = global::PlcCommunication.IdRange.CreateBuilder();
              if (HasResponseToDbRangeQuery) {
                subBuilder.MergeFrom(ResponseToDbRangeQuery);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResponseToDbRangeQuery = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasResponse {
       get { return result.HasResponse; }
      }
      public global::PlcCommunication.Response Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::PlcCommunication.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::PlcCommunication.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::PlcCommunication.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasResponse &&
            result.response_ != global::PlcCommunication.Response.DefaultInstance) {
            result.response_ = global::PlcCommunication.Response.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        result.hasResponse = false;
        result.response_ = global::PlcCommunication.Response.DefaultInstance;
        return this;
      }
      
      public bool HasOOBDatabaseRow {
       get { return result.HasOOBDatabaseRow; }
      }
      public global::PlcCommunication.DatabaseRow OOBDatabaseRow {
        get { return result.OOBDatabaseRow; }
        set { SetOOBDatabaseRow(value); }
      }
      public Builder SetOOBDatabaseRow(global::PlcCommunication.DatabaseRow value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOOBDatabaseRow = true;
        result.oOBDatabaseRow_ = value;
        return this;
      }
      public Builder SetOOBDatabaseRow(global::PlcCommunication.DatabaseRow.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOOBDatabaseRow = true;
        result.oOBDatabaseRow_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOOBDatabaseRow(global::PlcCommunication.DatabaseRow value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOOBDatabaseRow &&
            result.oOBDatabaseRow_ != global::PlcCommunication.DatabaseRow.DefaultInstance) {
            result.oOBDatabaseRow_ = global::PlcCommunication.DatabaseRow.CreateBuilder(result.oOBDatabaseRow_).MergeFrom(value).BuildPartial();
        } else {
          result.oOBDatabaseRow_ = value;
        }
        result.hasOOBDatabaseRow = true;
        return this;
      }
      public Builder ClearOOBDatabaseRow() {
        result.hasOOBDatabaseRow = false;
        result.oOBDatabaseRow_ = global::PlcCommunication.DatabaseRow.DefaultInstance;
        return this;
      }
      
      public bool HasOOBConfiguration {
       get { return result.HasOOBConfiguration; }
      }
      public global::PlcCommunication.Configuration OOBConfiguration {
        get { return result.OOBConfiguration; }
        set { SetOOBConfiguration(value); }
      }
      public Builder SetOOBConfiguration(global::PlcCommunication.Configuration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOOBConfiguration = true;
        result.oOBConfiguration_ = value;
        return this;
      }
      public Builder SetOOBConfiguration(global::PlcCommunication.Configuration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOOBConfiguration = true;
        result.oOBConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOOBConfiguration(global::PlcCommunication.Configuration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOOBConfiguration &&
            result.oOBConfiguration_ != global::PlcCommunication.Configuration.DefaultInstance) {
            result.oOBConfiguration_ = global::PlcCommunication.Configuration.CreateBuilder(result.oOBConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.oOBConfiguration_ = value;
        }
        result.hasOOBConfiguration = true;
        return this;
      }
      public Builder ClearOOBConfiguration() {
        result.hasOOBConfiguration = false;
        result.oOBConfiguration_ = global::PlcCommunication.Configuration.DefaultInstance;
        return this;
      }
      
      public bool HasOOBDatabaseRange {
       get { return result.HasOOBDatabaseRange; }
      }
      public global::PlcCommunication.IdRange OOBDatabaseRange {
        get { return result.OOBDatabaseRange; }
        set { SetOOBDatabaseRange(value); }
      }
      public Builder SetOOBDatabaseRange(global::PlcCommunication.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOOBDatabaseRange = true;
        result.oOBDatabaseRange_ = value;
        return this;
      }
      public Builder SetOOBDatabaseRange(global::PlcCommunication.IdRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOOBDatabaseRange = true;
        result.oOBDatabaseRange_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOOBDatabaseRange(global::PlcCommunication.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOOBDatabaseRange &&
            result.oOBDatabaseRange_ != global::PlcCommunication.IdRange.DefaultInstance) {
            result.oOBDatabaseRange_ = global::PlcCommunication.IdRange.CreateBuilder(result.oOBDatabaseRange_).MergeFrom(value).BuildPartial();
        } else {
          result.oOBDatabaseRange_ = value;
        }
        result.hasOOBDatabaseRange = true;
        return this;
      }
      public Builder ClearOOBDatabaseRange() {
        result.hasOOBDatabaseRange = false;
        result.oOBDatabaseRange_ = global::PlcCommunication.IdRange.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::PlcCommunication.DatabaseRow> ResponseToDatabaseRowsList {
        get { return result.responseToDatabaseRows_; }
      }
      public int ResponseToDatabaseRowsCount {
        get { return result.ResponseToDatabaseRowsCount; }
      }
      public global::PlcCommunication.DatabaseRow GetResponseToDatabaseRows(int index) {
        return result.GetResponseToDatabaseRows(index);
      }
      public Builder SetResponseToDatabaseRows(int index, global::PlcCommunication.DatabaseRow value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.responseToDatabaseRows_[index] = value;
        return this;
      }
      public Builder SetResponseToDatabaseRows(int index, global::PlcCommunication.DatabaseRow.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.responseToDatabaseRows_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResponseToDatabaseRows(global::PlcCommunication.DatabaseRow value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.responseToDatabaseRows_.Add(value);
        return this;
      }
      public Builder AddResponseToDatabaseRows(global::PlcCommunication.DatabaseRow.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.responseToDatabaseRows_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResponseToDatabaseRows(scg::IEnumerable<global::PlcCommunication.DatabaseRow> values) {
        base.AddRange(values, result.responseToDatabaseRows_);
        return this;
      }
      public Builder ClearResponseToDatabaseRows() {
        result.responseToDatabaseRows_.Clear();
        return this;
      }
      
      public bool HasCommand {
       get { return result.HasCommand; }
      }
      public global::PlcCommunication.COMMAND Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::PlcCommunication.COMMAND value) {
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        result.hasCommand = false;
        result.command_ = global::PlcCommunication.COMMAND.NOP;
        return this;
      }
      
      public pbc::IPopsicleList<global::PlcCommunication.RowUser> OOBRowUsersList {
        get { return result.oOBRowUsers_; }
      }
      public int OOBRowUsersCount {
        get { return result.OOBRowUsersCount; }
      }
      public global::PlcCommunication.RowUser GetOOBRowUsers(int index) {
        return result.GetOOBRowUsers(index);
      }
      public Builder SetOOBRowUsers(int index, global::PlcCommunication.RowUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.oOBRowUsers_[index] = value;
        return this;
      }
      public Builder SetOOBRowUsers(int index, global::PlcCommunication.RowUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.oOBRowUsers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOOBRowUsers(global::PlcCommunication.RowUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.oOBRowUsers_.Add(value);
        return this;
      }
      public Builder AddOOBRowUsers(global::PlcCommunication.RowUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.oOBRowUsers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOOBRowUsers(scg::IEnumerable<global::PlcCommunication.RowUser> values) {
        base.AddRange(values, result.oOBRowUsers_);
        return this;
      }
      public Builder ClearOOBRowUsers() {
        result.oOBRowUsers_.Clear();
        return this;
      }
      
      public bool HasSourceId {
        get { return result.HasSourceId; }
      }
      public int SourceId {
        get { return result.SourceId; }
        set { SetSourceId(value); }
      }
      public Builder SetSourceId(int value) {
        result.hasSourceId = true;
        result.sourceId_ = value;
        return this;
      }
      public Builder ClearSourceId() {
        result.hasSourceId = false;
        result.sourceId_ = 0;
        return this;
      }
      
      public bool HasResponseToQueryLatestRowPlcConfiguration {
       get { return result.HasResponseToQueryLatestRowPlcConfiguration; }
      }
      public global::PlcCommunication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration {
        get { return result.ResponseToQueryLatestRowPlcConfiguration; }
        set { SetResponseToQueryLatestRowPlcConfiguration(value); }
      }
      public Builder SetResponseToQueryLatestRowPlcConfiguration(global::PlcCommunication.RowPlcConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseToQueryLatestRowPlcConfiguration = true;
        result.responseToQueryLatestRowPlcConfiguration_ = value;
        return this;
      }
      public Builder SetResponseToQueryLatestRowPlcConfiguration(global::PlcCommunication.RowPlcConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasResponseToQueryLatestRowPlcConfiguration = true;
        result.responseToQueryLatestRowPlcConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponseToQueryLatestRowPlcConfiguration(global::PlcCommunication.RowPlcConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasResponseToQueryLatestRowPlcConfiguration &&
            result.responseToQueryLatestRowPlcConfiguration_ != global::PlcCommunication.RowPlcConfiguration.DefaultInstance) {
            result.responseToQueryLatestRowPlcConfiguration_ = global::PlcCommunication.RowPlcConfiguration.CreateBuilder(result.responseToQueryLatestRowPlcConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.responseToQueryLatestRowPlcConfiguration_ = value;
        }
        result.hasResponseToQueryLatestRowPlcConfiguration = true;
        return this;
      }
      public Builder ClearResponseToQueryLatestRowPlcConfiguration() {
        result.hasResponseToQueryLatestRowPlcConfiguration = false;
        result.responseToQueryLatestRowPlcConfiguration_ = global::PlcCommunication.RowPlcConfiguration.DefaultInstance;
        return this;
      }
      
      public bool HasResponseToDbRangeQuery {
       get { return result.HasResponseToDbRangeQuery; }
      }
      public global::PlcCommunication.IdRange ResponseToDbRangeQuery {
        get { return result.ResponseToDbRangeQuery; }
        set { SetResponseToDbRangeQuery(value); }
      }
      public Builder SetResponseToDbRangeQuery(global::PlcCommunication.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResponseToDbRangeQuery = true;
        result.responseToDbRangeQuery_ = value;
        return this;
      }
      public Builder SetResponseToDbRangeQuery(global::PlcCommunication.IdRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasResponseToDbRangeQuery = true;
        result.responseToDbRangeQuery_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponseToDbRangeQuery(global::PlcCommunication.IdRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasResponseToDbRangeQuery &&
            result.responseToDbRangeQuery_ != global::PlcCommunication.IdRange.DefaultInstance) {
            result.responseToDbRangeQuery_ = global::PlcCommunication.IdRange.CreateBuilder(result.responseToDbRangeQuery_).MergeFrom(value).BuildPartial();
        } else {
          result.responseToDbRangeQuery_ = value;
        }
        result.hasResponseToDbRangeQuery = true;
        return this;
      }
      public Builder ClearResponseToDbRangeQuery() {
        result.hasResponseToDbRangeQuery = false;
        result.responseToDbRangeQuery_ = global::PlcCommunication.IdRange.DefaultInstance;
        return this;
      }
    }
    static MessageFromPlc() {
      object.ReferenceEquals(global::PlcCommunication.PlcCommunication.Descriptor, null);
    }
  }
  
  #endregion
  
}
