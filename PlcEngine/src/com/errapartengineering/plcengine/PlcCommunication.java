// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlcCommunication.proto

package com.errapartengineering.plcengine;

public final class PlcCommunication {
  private PlcCommunication() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code communication.COMMAND}
   *
   * <pre>
   ** Command from the PLC, if any. 
   * </pre>
   */
  public enum COMMAND
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NOP = 0;</code>
     *
     * <pre>
     ** No operation. 
     * </pre>
     */
    NOP(0, 0),
    /**
     * <code>DROP_CONNECTION = 1;</code>
     *
     * <pre>
     ** Drop the connection. 
     * </pre>
     */
    DROP_CONNECTION(1, 1),
    /**
     * <code>RELOAD_CONFIGURATION = 2;</code>
     *
     * <pre>
     ** Reload configuration. 
     * </pre>
     */
    RELOAD_CONFIGURATION(2, 2),
    ;

    /**
     * <code>NOP = 0;</code>
     *
     * <pre>
     ** No operation. 
     * </pre>
     */
    public static final int NOP_VALUE = 0;
    /**
     * <code>DROP_CONNECTION = 1;</code>
     *
     * <pre>
     ** Drop the connection. 
     * </pre>
     */
    public static final int DROP_CONNECTION_VALUE = 1;
    /**
     * <code>RELOAD_CONFIGURATION = 2;</code>
     *
     * <pre>
     ** Reload configuration. 
     * </pre>
     */
    public static final int RELOAD_CONFIGURATION_VALUE = 2;


    public final int getNumber() { return value; }

    public static COMMAND valueOf(int value) {
      switch (value) {
        case 0: return NOP;
        case 1: return DROP_CONNECTION;
        case 2: return RELOAD_CONFIGURATION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<COMMAND>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<COMMAND>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<COMMAND>() {
            public COMMAND findValueByNumber(int number) {
              return COMMAND.valueOf(number);
            }
          };

    private final int value;

    private COMMAND(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:communication.COMMAND)
  }

  public interface IdRangeOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int32 TailId = 1;
    /**
     * <code>optional int32 TailId = 1;</code>
     */
    boolean hasTailId();
    /**
     * <code>optional int32 TailId = 1;</code>
     */
    int getTailId();

    // optional int32 HeadId = 2;
    /**
     * <code>optional int32 HeadId = 2;</code>
     */
    boolean hasHeadId();
    /**
     * <code>optional int32 HeadId = 2;</code>
     */
    int getHeadId();
  }
  /**
   * Protobuf type {@code communication.IdRange}
   *
   * <pre>
   ** Id-s in the range [TailId ... HeadId), i.e. TailId is inclusive and HeadId is exclusive.
   * </pre>
   */
  public static final class IdRange extends
      com.google.protobuf.GeneratedMessageLite
      implements IdRangeOrBuilder {
    // Use IdRange.newBuilder() to construct.
    private IdRange(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private IdRange(boolean noInit) {}

    private static final IdRange defaultInstance;
    public static IdRange getDefaultInstance() {
      return defaultInstance;
    }

    public IdRange getDefaultInstanceForType() {
      return defaultInstance;
    }

    private IdRange(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tailId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              headId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<IdRange> PARSER =
        new com.google.protobuf.AbstractParser<IdRange>() {
      public IdRange parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IdRange(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<IdRange> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 TailId = 1;
    public static final int TAILID_FIELD_NUMBER = 1;
    private int tailId_;
    /**
     * <code>optional int32 TailId = 1;</code>
     */
    public boolean hasTailId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 TailId = 1;</code>
     */
    public int getTailId() {
      return tailId_;
    }

    // optional int32 HeadId = 2;
    public static final int HEADID_FIELD_NUMBER = 2;
    private int headId_;
    /**
     * <code>optional int32 HeadId = 2;</code>
     */
    public boolean hasHeadId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 HeadId = 2;</code>
     */
    public int getHeadId() {
      return headId_;
    }

    private void initFields() {
      tailId_ = 0;
      headId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, tailId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, headId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, tailId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, headId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.IdRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.IdRange prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.IdRange}
     *
     * <pre>
     ** Id-s in the range [TailId ... HeadId), i.e. TailId is inclusive and HeadId is exclusive.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.IdRange, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.IdRangeOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.IdRange.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tailId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        headId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.IdRange getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.IdRange build() {
        com.errapartengineering.plcengine.PlcCommunication.IdRange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.IdRange buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.IdRange result = new com.errapartengineering.plcengine.PlcCommunication.IdRange(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tailId_ = tailId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.headId_ = headId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.IdRange other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance()) return this;
        if (other.hasTailId()) {
          setTailId(other.getTailId());
        }
        if (other.hasHeadId()) {
          setHeadId(other.getHeadId());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.IdRange parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.IdRange) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 TailId = 1;
      private int tailId_ ;
      /**
       * <code>optional int32 TailId = 1;</code>
       */
      public boolean hasTailId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 TailId = 1;</code>
       */
      public int getTailId() {
        return tailId_;
      }
      /**
       * <code>optional int32 TailId = 1;</code>
       */
      public Builder setTailId(int value) {
        bitField0_ |= 0x00000001;
        tailId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 TailId = 1;</code>
       */
      public Builder clearTailId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tailId_ = 0;
        
        return this;
      }

      // optional int32 HeadId = 2;
      private int headId_ ;
      /**
       * <code>optional int32 HeadId = 2;</code>
       */
      public boolean hasHeadId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 HeadId = 2;</code>
       */
      public int getHeadId() {
        return headId_;
      }
      /**
       * <code>optional int32 HeadId = 2;</code>
       */
      public Builder setHeadId(int value) {
        bitField0_ |= 0x00000002;
        headId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 HeadId = 2;</code>
       */
      public Builder clearHeadId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        headId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.IdRange)
    }

    static {
      defaultInstance = new IdRange(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.IdRange)
  }

  public interface SignalAndValueOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional string Name = 1;
    /**
     * <code>optional string Name = 1;</code>
     *
     * <pre>
     ** Name of the signal to be set. 
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string Name = 1;</code>
     *
     * <pre>
     ** Name of the signal to be set. 
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string Name = 1;</code>
     *
     * <pre>
     ** Name of the signal to be set. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional int32 Value = 2;
    /**
     * <code>optional int32 Value = 2;</code>
     *
     * <pre>
     ** Value to be set to. 
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional int32 Value = 2;</code>
     *
     * <pre>
     ** Value to be set to. 
     * </pre>
     */
    int getValue();

    // optional int32 UserId = 3;
    /**
     * <code>optional int32 UserId = 3;</code>
     *
     * <pre>
     ** Id of the user to set the signal on. 
     * </pre>
     */
    boolean hasUserId();
    /**
     * <code>optional int32 UserId = 3;</code>
     *
     * <pre>
     ** Id of the user to set the signal on. 
     * </pre>
     */
    int getUserId();
  }
  /**
   * Protobuf type {@code communication.SignalAndValue}
   *
   * <pre>
   ** Set the value of the signal. 
   * </pre>
   */
  public static final class SignalAndValue extends
      com.google.protobuf.GeneratedMessageLite
      implements SignalAndValueOrBuilder {
    // Use SignalAndValue.newBuilder() to construct.
    private SignalAndValue(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private SignalAndValue(boolean noInit) {}

    private static final SignalAndValue defaultInstance;
    public static SignalAndValue getDefaultInstance() {
      return defaultInstance;
    }

    public SignalAndValue getDefaultInstanceForType() {
      return defaultInstance;
    }

    private SignalAndValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              userId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<SignalAndValue> PARSER =
        new com.google.protobuf.AbstractParser<SignalAndValue>() {
      public SignalAndValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SignalAndValue(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SignalAndValue> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string Name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string Name = 1;</code>
     *
     * <pre>
     ** Name of the signal to be set. 
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string Name = 1;</code>
     *
     * <pre>
     ** Name of the signal to be set. 
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string Name = 1;</code>
     *
     * <pre>
     ** Name of the signal to be set. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 Value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>optional int32 Value = 2;</code>
     *
     * <pre>
     ** Value to be set to. 
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 Value = 2;</code>
     *
     * <pre>
     ** Value to be set to. 
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    // optional int32 UserId = 3;
    public static final int USERID_FIELD_NUMBER = 3;
    private int userId_;
    /**
     * <code>optional int32 UserId = 3;</code>
     *
     * <pre>
     ** Id of the user to set the signal on. 
     * </pre>
     */
    public boolean hasUserId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 UserId = 3;</code>
     *
     * <pre>
     ** Id of the user to set the signal on. 
     * </pre>
     */
    public int getUserId() {
      return userId_;
    }

    private void initFields() {
      name_ = "";
      value_ = 0;
      userId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, userId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, userId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.SignalAndValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.SignalAndValue}
     *
     * <pre>
     ** Set the value of the signal. 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.SignalAndValue, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.SignalAndValueOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        userId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.SignalAndValue getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.SignalAndValue build() {
        com.errapartengineering.plcengine.PlcCommunication.SignalAndValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.SignalAndValue buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.SignalAndValue result = new com.errapartengineering.plcengine.PlcCommunication.SignalAndValue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.userId_ = userId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.SignalAndValue other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasUserId()) {
          setUserId(other.getUserId());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.SignalAndValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.SignalAndValue) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string Name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string Name = 1;</code>
       *
       * <pre>
       ** Name of the signal to be set. 
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string Name = 1;</code>
       *
       * <pre>
       ** Name of the signal to be set. 
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Name = 1;</code>
       *
       * <pre>
       ** Name of the signal to be set. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Name = 1;</code>
       *
       * <pre>
       ** Name of the signal to be set. 
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string Name = 1;</code>
       *
       * <pre>
       ** Name of the signal to be set. 
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string Name = 1;</code>
       *
       * <pre>
       ** Name of the signal to be set. 
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        
        return this;
      }

      // optional int32 Value = 2;
      private int value_ ;
      /**
       * <code>optional int32 Value = 2;</code>
       *
       * <pre>
       ** Value to be set to. 
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 Value = 2;</code>
       *
       * <pre>
       ** Value to be set to. 
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 Value = 2;</code>
       *
       * <pre>
       ** Value to be set to. 
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 Value = 2;</code>
       *
       * <pre>
       ** Value to be set to. 
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        
        return this;
      }

      // optional int32 UserId = 3;
      private int userId_ ;
      /**
       * <code>optional int32 UserId = 3;</code>
       *
       * <pre>
       ** Id of the user to set the signal on. 
       * </pre>
       */
      public boolean hasUserId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 UserId = 3;</code>
       *
       * <pre>
       ** Id of the user to set the signal on. 
       * </pre>
       */
      public int getUserId() {
        return userId_;
      }
      /**
       * <code>optional int32 UserId = 3;</code>
       *
       * <pre>
       ** Id of the user to set the signal on. 
       * </pre>
       */
      public Builder setUserId(int value) {
        bitField0_ |= 0x00000004;
        userId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 UserId = 3;</code>
       *
       * <pre>
       ** Id of the user to set the signal on. 
       * </pre>
       */
      public Builder clearUserId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        userId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.SignalAndValue)
    }

    static {
      defaultInstance = new SignalAndValue(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.SignalAndValue)
  }

  public interface DatabaseRowOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int32 RowId = 1;
    /**
     * <code>optional int32 RowId = 1;</code>
     */
    boolean hasRowId();
    /**
     * <code>optional int32 RowId = 1;</code>
     */
    int getRowId();

    // optional int32 Version = 2;
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    int getVersion();

    // optional int64 TimeMs = 3;
    /**
     * <code>optional int64 TimeMs = 3;</code>
     *
     * <pre>
     ** Timestamp, Java milliseconds. 
     * </pre>
     */
    boolean hasTimeMs();
    /**
     * <code>optional int64 TimeMs = 3;</code>
     *
     * <pre>
     ** Timestamp, Java milliseconds. 
     * </pre>
     */
    long getTimeMs();

    // optional bytes SignalValues = 4;
    /**
     * <code>optional bytes SignalValues = 4;</code>
     *
     * <pre>
     ** Signal values. 
     * </pre>
     */
    boolean hasSignalValues();
    /**
     * <code>optional bytes SignalValues = 4;</code>
     *
     * <pre>
     ** Signal values. 
     * </pre>
     */
    com.google.protobuf.ByteString getSignalValues();
  }
  /**
   * Protobuf type {@code communication.DatabaseRow}
   *
   * <pre>
   ** Row in the table 'SignalValue' 
   * </pre>
   */
  public static final class DatabaseRow extends
      com.google.protobuf.GeneratedMessageLite
      implements DatabaseRowOrBuilder {
    // Use DatabaseRow.newBuilder() to construct.
    private DatabaseRow(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private DatabaseRow(boolean noInit) {}

    private static final DatabaseRow defaultInstance;
    public static DatabaseRow getDefaultInstance() {
      return defaultInstance;
    }

    public DatabaseRow getDefaultInstanceForType() {
      return defaultInstance;
    }

    private DatabaseRow(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rowId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              version_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timeMs_ = input.readInt64();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              signalValues_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<DatabaseRow> PARSER =
        new com.google.protobuf.AbstractParser<DatabaseRow>() {
      public DatabaseRow parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DatabaseRow(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DatabaseRow> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 RowId = 1;
    public static final int ROWID_FIELD_NUMBER = 1;
    private int rowId_;
    /**
     * <code>optional int32 RowId = 1;</code>
     */
    public boolean hasRowId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 RowId = 1;</code>
     */
    public int getRowId() {
      return rowId_;
    }

    // optional int32 Version = 2;
    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_;
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    // optional int64 TimeMs = 3;
    public static final int TIMEMS_FIELD_NUMBER = 3;
    private long timeMs_;
    /**
     * <code>optional int64 TimeMs = 3;</code>
     *
     * <pre>
     ** Timestamp, Java milliseconds. 
     * </pre>
     */
    public boolean hasTimeMs() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 TimeMs = 3;</code>
     *
     * <pre>
     ** Timestamp, Java milliseconds. 
     * </pre>
     */
    public long getTimeMs() {
      return timeMs_;
    }

    // optional bytes SignalValues = 4;
    public static final int SIGNALVALUES_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString signalValues_;
    /**
     * <code>optional bytes SignalValues = 4;</code>
     *
     * <pre>
     ** Signal values. 
     * </pre>
     */
    public boolean hasSignalValues() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes SignalValues = 4;</code>
     *
     * <pre>
     ** Signal values. 
     * </pre>
     */
    public com.google.protobuf.ByteString getSignalValues() {
      return signalValues_;
    }

    private void initFields() {
      rowId_ = 0;
      version_ = 0;
      timeMs_ = 0L;
      signalValues_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, rowId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, timeMs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, signalValues_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, rowId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timeMs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, signalValues_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.DatabaseRow}
     *
     * <pre>
     ** Row in the table 'SignalValue' 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.DatabaseRow, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.DatabaseRowOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rowId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        timeMs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        signalValues_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow build() {
        com.errapartengineering.plcengine.PlcCommunication.DatabaseRow result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.DatabaseRow result = new com.errapartengineering.plcengine.PlcCommunication.DatabaseRow(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rowId_ = rowId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timeMs_ = timeMs_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.signalValues_ = signalValues_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance()) return this;
        if (other.hasRowId()) {
          setRowId(other.getRowId());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasTimeMs()) {
          setTimeMs(other.getTimeMs());
        }
        if (other.hasSignalValues()) {
          setSignalValues(other.getSignalValues());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.DatabaseRow parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.DatabaseRow) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 RowId = 1;
      private int rowId_ ;
      /**
       * <code>optional int32 RowId = 1;</code>
       */
      public boolean hasRowId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 RowId = 1;</code>
       */
      public int getRowId() {
        return rowId_;
      }
      /**
       * <code>optional int32 RowId = 1;</code>
       */
      public Builder setRowId(int value) {
        bitField0_ |= 0x00000001;
        rowId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 RowId = 1;</code>
       */
      public Builder clearRowId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rowId_ = 0;
        
        return this;
      }

      // optional int32 Version = 2;
      private int version_ ;
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000002;
        version_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        
        return this;
      }

      // optional int64 TimeMs = 3;
      private long timeMs_ ;
      /**
       * <code>optional int64 TimeMs = 3;</code>
       *
       * <pre>
       ** Timestamp, Java milliseconds. 
       * </pre>
       */
      public boolean hasTimeMs() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 TimeMs = 3;</code>
       *
       * <pre>
       ** Timestamp, Java milliseconds. 
       * </pre>
       */
      public long getTimeMs() {
        return timeMs_;
      }
      /**
       * <code>optional int64 TimeMs = 3;</code>
       *
       * <pre>
       ** Timestamp, Java milliseconds. 
       * </pre>
       */
      public Builder setTimeMs(long value) {
        bitField0_ |= 0x00000004;
        timeMs_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 TimeMs = 3;</code>
       *
       * <pre>
       ** Timestamp, Java milliseconds. 
       * </pre>
       */
      public Builder clearTimeMs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timeMs_ = 0L;
        
        return this;
      }

      // optional bytes SignalValues = 4;
      private com.google.protobuf.ByteString signalValues_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes SignalValues = 4;</code>
       *
       * <pre>
       ** Signal values. 
       * </pre>
       */
      public boolean hasSignalValues() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes SignalValues = 4;</code>
       *
       * <pre>
       ** Signal values. 
       * </pre>
       */
      public com.google.protobuf.ByteString getSignalValues() {
        return signalValues_;
      }
      /**
       * <code>optional bytes SignalValues = 4;</code>
       *
       * <pre>
       ** Signal values. 
       * </pre>
       */
      public Builder setSignalValues(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        signalValues_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes SignalValues = 4;</code>
       *
       * <pre>
       ** Signal values. 
       * </pre>
       */
      public Builder clearSignalValues() {
        bitField0_ = (bitField0_ & ~0x00000008);
        signalValues_ = getDefaultInstance().getSignalValues();
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.DatabaseRow)
    }

    static {
      defaultInstance = new DatabaseRow(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.DatabaseRow)
  }

  public interface RowUserOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int32 Id = 1;
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** User Id. 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** User Id. 
     * </pre>
     */
    int getId();

    // optional int64 CreateDate = 2;
    /**
     * <code>optional int64 CreateDate = 2;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    boolean hasCreateDate();
    /**
     * <code>optional int64 CreateDate = 2;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    long getCreateDate();

    // optional string Name = 3;
    /**
     * <code>optional string Name = 3;</code>
     *
     * <pre>
     ** Name. 
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string Name = 3;</code>
     *
     * <pre>
     ** Name. 
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string Name = 3;</code>
     *
     * <pre>
     ** Name. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional string Type = 4;
    /**
     * <code>optional string Type = 4;</code>
     *
     * <pre>
     ** Type. 
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string Type = 4;</code>
     *
     * <pre>
     ** Type. 
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string Type = 4;</code>
     *
     * <pre>
     ** Type. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    // optional bool IsPublic = 5;
    /**
     * <code>optional bool IsPublic = 5;</code>
     *
     * <pre>
     ** Is it public? 
     * </pre>
     */
    boolean hasIsPublic();
    /**
     * <code>optional bool IsPublic = 5;</code>
     *
     * <pre>
     ** Is it public? 
     * </pre>
     */
    boolean getIsPublic();

    // optional string Credentials = 6;
    /**
     * <code>optional string Credentials = 6;</code>
     *
     * <pre>
     ** Credentials (in the JSON form)? No clear-text passwords. 
     * </pre>
     */
    boolean hasCredentials();
    /**
     * <code>optional string Credentials = 6;</code>
     *
     * <pre>
     ** Credentials (in the JSON form)? No clear-text passwords. 
     * </pre>
     */
    java.lang.String getCredentials();
    /**
     * <code>optional string Credentials = 6;</code>
     *
     * <pre>
     ** Credentials (in the JSON form)? No clear-text passwords. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getCredentialsBytes();
  }
  /**
   * Protobuf type {@code communication.RowUser}
   *
   * <pre>
   ** Row in the table 'User'. 
   * </pre>
   */
  public static final class RowUser extends
      com.google.protobuf.GeneratedMessageLite
      implements RowUserOrBuilder {
    // Use RowUser.newBuilder() to construct.
    private RowUser(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RowUser(boolean noInit) {}

    private static final RowUser defaultInstance;
    public static RowUser getDefaultInstance() {
      return defaultInstance;
    }

    public RowUser getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RowUser(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              createDate_ = input.readInt64();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              name_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              type_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isPublic_ = input.readBool();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              credentials_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RowUser> PARSER =
        new com.google.protobuf.AbstractParser<RowUser>() {
      public RowUser parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RowUser(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RowUser> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** User Id. 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** User Id. 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // optional int64 CreateDate = 2;
    public static final int CREATEDATE_FIELD_NUMBER = 2;
    private long createDate_;
    /**
     * <code>optional int64 CreateDate = 2;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    public boolean hasCreateDate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 CreateDate = 2;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    public long getCreateDate() {
      return createDate_;
    }

    // optional string Name = 3;
    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string Name = 3;</code>
     *
     * <pre>
     ** Name. 
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string Name = 3;</code>
     *
     * <pre>
     ** Name. 
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string Name = 3;</code>
     *
     * <pre>
     ** Name. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string Type = 4;
    public static final int TYPE_FIELD_NUMBER = 4;
    private java.lang.Object type_;
    /**
     * <code>optional string Type = 4;</code>
     *
     * <pre>
     ** Type. 
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string Type = 4;</code>
     *
     * <pre>
     ** Type. 
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string Type = 4;</code>
     *
     * <pre>
     ** Type. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool IsPublic = 5;
    public static final int ISPUBLIC_FIELD_NUMBER = 5;
    private boolean isPublic_;
    /**
     * <code>optional bool IsPublic = 5;</code>
     *
     * <pre>
     ** Is it public? 
     * </pre>
     */
    public boolean hasIsPublic() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool IsPublic = 5;</code>
     *
     * <pre>
     ** Is it public? 
     * </pre>
     */
    public boolean getIsPublic() {
      return isPublic_;
    }

    // optional string Credentials = 6;
    public static final int CREDENTIALS_FIELD_NUMBER = 6;
    private java.lang.Object credentials_;
    /**
     * <code>optional string Credentials = 6;</code>
     *
     * <pre>
     ** Credentials (in the JSON form)? No clear-text passwords. 
     * </pre>
     */
    public boolean hasCredentials() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string Credentials = 6;</code>
     *
     * <pre>
     ** Credentials (in the JSON form)? No clear-text passwords. 
     * </pre>
     */
    public java.lang.String getCredentials() {
      java.lang.Object ref = credentials_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          credentials_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string Credentials = 6;</code>
     *
     * <pre>
     ** Credentials (in the JSON form)? No clear-text passwords. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCredentialsBytes() {
      java.lang.Object ref = credentials_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        credentials_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      id_ = 0;
      createDate_ = 0L;
      name_ = "";
      type_ = "";
      isPublic_ = false;
      credentials_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, createDate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTypeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isPublic_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getCredentialsBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, createDate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTypeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isPublic_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getCredentialsBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowUser parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.RowUser prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.RowUser}
     *
     * <pre>
     ** Row in the table 'User'. 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.RowUser, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.RowUserOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.RowUser.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        createDate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        isPublic_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        credentials_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.RowUser getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.RowUser.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.RowUser build() {
        com.errapartengineering.plcengine.PlcCommunication.RowUser result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.RowUser buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.RowUser result = new com.errapartengineering.plcengine.PlcCommunication.RowUser(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.createDate_ = createDate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isPublic_ = isPublic_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.credentials_ = credentials_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.RowUser other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.RowUser.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasCreateDate()) {
          setCreateDate(other.getCreateDate());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000008;
          type_ = other.type_;
          
        }
        if (other.hasIsPublic()) {
          setIsPublic(other.getIsPublic());
        }
        if (other.hasCredentials()) {
          bitField0_ |= 0x00000020;
          credentials_ = other.credentials_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.RowUser parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.RowUser) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 Id = 1;
      private int id_ ;
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** User Id. 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** User Id. 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** User Id. 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** User Id. 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // optional int64 CreateDate = 2;
      private long createDate_ ;
      /**
       * <code>optional int64 CreateDate = 2;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public boolean hasCreateDate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 CreateDate = 2;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public long getCreateDate() {
        return createDate_;
      }
      /**
       * <code>optional int64 CreateDate = 2;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public Builder setCreateDate(long value) {
        bitField0_ |= 0x00000002;
        createDate_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 CreateDate = 2;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public Builder clearCreateDate() {
        bitField0_ = (bitField0_ & ~0x00000002);
        createDate_ = 0L;
        
        return this;
      }

      // optional string Name = 3;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string Name = 3;</code>
       *
       * <pre>
       ** Name. 
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string Name = 3;</code>
       *
       * <pre>
       ** Name. 
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Name = 3;</code>
       *
       * <pre>
       ** Name. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Name = 3;</code>
       *
       * <pre>
       ** Name. 
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string Name = 3;</code>
       *
       * <pre>
       ** Name. 
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string Name = 3;</code>
       *
       * <pre>
       ** Name. 
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      // optional string Type = 4;
      private java.lang.Object type_ = "";
      /**
       * <code>optional string Type = 4;</code>
       *
       * <pre>
       ** Type. 
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string Type = 4;</code>
       *
       * <pre>
       ** Type. 
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Type = 4;</code>
       *
       * <pre>
       ** Type. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Type = 4;</code>
       *
       * <pre>
       ** Type. 
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        type_ = value;
        
        return this;
      }
      /**
       * <code>optional string Type = 4;</code>
       *
       * <pre>
       ** Type. 
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = getDefaultInstance().getType();
        
        return this;
      }
      /**
       * <code>optional string Type = 4;</code>
       *
       * <pre>
       ** Type. 
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        type_ = value;
        
        return this;
      }

      // optional bool IsPublic = 5;
      private boolean isPublic_ ;
      /**
       * <code>optional bool IsPublic = 5;</code>
       *
       * <pre>
       ** Is it public? 
       * </pre>
       */
      public boolean hasIsPublic() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool IsPublic = 5;</code>
       *
       * <pre>
       ** Is it public? 
       * </pre>
       */
      public boolean getIsPublic() {
        return isPublic_;
      }
      /**
       * <code>optional bool IsPublic = 5;</code>
       *
       * <pre>
       ** Is it public? 
       * </pre>
       */
      public Builder setIsPublic(boolean value) {
        bitField0_ |= 0x00000010;
        isPublic_ = value;
        
        return this;
      }
      /**
       * <code>optional bool IsPublic = 5;</code>
       *
       * <pre>
       ** Is it public? 
       * </pre>
       */
      public Builder clearIsPublic() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isPublic_ = false;
        
        return this;
      }

      // optional string Credentials = 6;
      private java.lang.Object credentials_ = "";
      /**
       * <code>optional string Credentials = 6;</code>
       *
       * <pre>
       ** Credentials (in the JSON form)? No clear-text passwords. 
       * </pre>
       */
      public boolean hasCredentials() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string Credentials = 6;</code>
       *
       * <pre>
       ** Credentials (in the JSON form)? No clear-text passwords. 
       * </pre>
       */
      public java.lang.String getCredentials() {
        java.lang.Object ref = credentials_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          credentials_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Credentials = 6;</code>
       *
       * <pre>
       ** Credentials (in the JSON form)? No clear-text passwords. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCredentialsBytes() {
        java.lang.Object ref = credentials_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          credentials_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Credentials = 6;</code>
       *
       * <pre>
       ** Credentials (in the JSON form)? No clear-text passwords. 
       * </pre>
       */
      public Builder setCredentials(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        credentials_ = value;
        
        return this;
      }
      /**
       * <code>optional string Credentials = 6;</code>
       *
       * <pre>
       ** Credentials (in the JSON form)? No clear-text passwords. 
       * </pre>
       */
      public Builder clearCredentials() {
        bitField0_ = (bitField0_ & ~0x00000020);
        credentials_ = getDefaultInstance().getCredentials();
        
        return this;
      }
      /**
       * <code>optional string Credentials = 6;</code>
       *
       * <pre>
       ** Credentials (in the JSON form)? No clear-text passwords. 
       * </pre>
       */
      public Builder setCredentialsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        credentials_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.RowUser)
    }

    static {
      defaultInstance = new RowUser(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.RowUser)
  }

  public interface RowPlcConfigurationOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int32 Id = 1;
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** PlcConfiguration Id. 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** PlcConfiguration Id. 
     * </pre>
     */
    int getId();

    // optional int32 UserId = 2;
    /**
     * <code>optional int32 UserId = 2;</code>
     *
     * <pre>
     ** Id of the user. 
     * </pre>
     */
    boolean hasUserId();
    /**
     * <code>optional int32 UserId = 2;</code>
     *
     * <pre>
     ** Id of the user. 
     * </pre>
     */
    int getUserId();

    // optional int32 UserSessionId = 3;
    /**
     * <code>optional int32 UserSessionId = 3;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    boolean hasUserSessionId();
    /**
     * <code>optional int32 UserSessionId = 3;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    int getUserSessionId();

    // optional int64 CreateDate = 4;
    /**
     * <code>optional int64 CreateDate = 4;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    boolean hasCreateDate();
    /**
     * <code>optional int64 CreateDate = 4;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    long getCreateDate();

    // optional int32 Version = 5;
    /**
     * <code>optional int32 Version = 5;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>optional int32 Version = 5;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    int getVersion();

    // optional bytes ConfigurationFile = 6;
    /**
     * <code>optional bytes ConfigurationFile = 6;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    boolean hasConfigurationFile();
    /**
     * <code>optional bytes ConfigurationFile = 6;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    com.google.protobuf.ByteString getConfigurationFile();

    // optional bytes Preferences = 7;
    /**
     * <code>optional bytes Preferences = 7;</code>
     *
     * <pre>
     ** Android Preferences. 
     * </pre>
     */
    boolean hasPreferences();
    /**
     * <code>optional bytes Preferences = 7;</code>
     *
     * <pre>
     ** Android Preferences. 
     * </pre>
     */
    com.google.protobuf.ByteString getPreferences();
  }
  /**
   * Protobuf type {@code communication.RowPlcConfiguration}
   *
   * <pre>
   ** Row in the table 'PlcConfiguration'. 
   * </pre>
   */
  public static final class RowPlcConfiguration extends
      com.google.protobuf.GeneratedMessageLite
      implements RowPlcConfigurationOrBuilder {
    // Use RowPlcConfiguration.newBuilder() to construct.
    private RowPlcConfiguration(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RowPlcConfiguration(boolean noInit) {}

    private static final RowPlcConfiguration defaultInstance;
    public static RowPlcConfiguration getDefaultInstance() {
      return defaultInstance;
    }

    public RowPlcConfiguration getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RowPlcConfiguration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              userId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              userSessionId_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              createDate_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              version_ = input.readInt32();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              configurationFile_ = input.readBytes();
              break;
            }
            case 58: {
              bitField0_ |= 0x00000040;
              preferences_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RowPlcConfiguration> PARSER =
        new com.google.protobuf.AbstractParser<RowPlcConfiguration>() {
      public RowPlcConfiguration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RowPlcConfiguration(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RowPlcConfiguration> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** PlcConfiguration Id. 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 Id = 1;</code>
     *
     * <pre>
     ** PlcConfiguration Id. 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // optional int32 UserId = 2;
    public static final int USERID_FIELD_NUMBER = 2;
    private int userId_;
    /**
     * <code>optional int32 UserId = 2;</code>
     *
     * <pre>
     ** Id of the user. 
     * </pre>
     */
    public boolean hasUserId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 UserId = 2;</code>
     *
     * <pre>
     ** Id of the user. 
     * </pre>
     */
    public int getUserId() {
      return userId_;
    }

    // optional int32 UserSessionId = 3;
    public static final int USERSESSIONID_FIELD_NUMBER = 3;
    private int userSessionId_;
    /**
     * <code>optional int32 UserSessionId = 3;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public boolean hasUserSessionId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 UserSessionId = 3;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public int getUserSessionId() {
      return userSessionId_;
    }

    // optional int64 CreateDate = 4;
    public static final int CREATEDATE_FIELD_NUMBER = 4;
    private long createDate_;
    /**
     * <code>optional int64 CreateDate = 4;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    public boolean hasCreateDate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 CreateDate = 4;</code>
     *
     * <pre>
     ** DateTime.Ticks (.NET framework). 
     * </pre>
     */
    public long getCreateDate() {
      return createDate_;
    }

    // optional int32 Version = 5;
    public static final int VERSION_FIELD_NUMBER = 5;
    private int version_;
    /**
     * <code>optional int32 Version = 5;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 Version = 5;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    // optional bytes ConfigurationFile = 6;
    public static final int CONFIGURATIONFILE_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString configurationFile_;
    /**
     * <code>optional bytes ConfigurationFile = 6;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    public boolean hasConfigurationFile() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes ConfigurationFile = 6;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    public com.google.protobuf.ByteString getConfigurationFile() {
      return configurationFile_;
    }

    // optional bytes Preferences = 7;
    public static final int PREFERENCES_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString preferences_;
    /**
     * <code>optional bytes Preferences = 7;</code>
     *
     * <pre>
     ** Android Preferences. 
     * </pre>
     */
    public boolean hasPreferences() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bytes Preferences = 7;</code>
     *
     * <pre>
     ** Android Preferences. 
     * </pre>
     */
    public com.google.protobuf.ByteString getPreferences() {
      return preferences_;
    }

    private void initFields() {
      id_ = 0;
      userId_ = 0;
      userSessionId_ = 0;
      createDate_ = 0L;
      version_ = 0;
      configurationFile_ = com.google.protobuf.ByteString.EMPTY;
      preferences_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, userId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, userSessionId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, createDate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, version_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, configurationFile_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, preferences_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, userId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, userSessionId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, createDate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, version_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, configurationFile_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, preferences_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.RowPlcConfiguration}
     *
     * <pre>
     ** Row in the table 'PlcConfiguration'. 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.RowPlcConfigurationOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        userId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        userSessionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        createDate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        configurationFile_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        preferences_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration build() {
        com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration result = new com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userId_ = userId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.userSessionId_ = userSessionId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.createDate_ = createDate_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.configurationFile_ = configurationFile_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.preferences_ = preferences_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasUserId()) {
          setUserId(other.getUserId());
        }
        if (other.hasUserSessionId()) {
          setUserSessionId(other.getUserSessionId());
        }
        if (other.hasCreateDate()) {
          setCreateDate(other.getCreateDate());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasConfigurationFile()) {
          setConfigurationFile(other.getConfigurationFile());
        }
        if (other.hasPreferences()) {
          setPreferences(other.getPreferences());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 Id = 1;
      private int id_ ;
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** PlcConfiguration Id. 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** PlcConfiguration Id. 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** PlcConfiguration Id. 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 Id = 1;</code>
       *
       * <pre>
       ** PlcConfiguration Id. 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // optional int32 UserId = 2;
      private int userId_ ;
      /**
       * <code>optional int32 UserId = 2;</code>
       *
       * <pre>
       ** Id of the user. 
       * </pre>
       */
      public boolean hasUserId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 UserId = 2;</code>
       *
       * <pre>
       ** Id of the user. 
       * </pre>
       */
      public int getUserId() {
        return userId_;
      }
      /**
       * <code>optional int32 UserId = 2;</code>
       *
       * <pre>
       ** Id of the user. 
       * </pre>
       */
      public Builder setUserId(int value) {
        bitField0_ |= 0x00000002;
        userId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 UserId = 2;</code>
       *
       * <pre>
       ** Id of the user. 
       * </pre>
       */
      public Builder clearUserId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userId_ = 0;
        
        return this;
      }

      // optional int32 UserSessionId = 3;
      private int userSessionId_ ;
      /**
       * <code>optional int32 UserSessionId = 3;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public boolean hasUserSessionId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 UserSessionId = 3;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public int getUserSessionId() {
        return userSessionId_;
      }
      /**
       * <code>optional int32 UserSessionId = 3;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder setUserSessionId(int value) {
        bitField0_ |= 0x00000004;
        userSessionId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 UserSessionId = 3;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder clearUserSessionId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        userSessionId_ = 0;
        
        return this;
      }

      // optional int64 CreateDate = 4;
      private long createDate_ ;
      /**
       * <code>optional int64 CreateDate = 4;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public boolean hasCreateDate() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 CreateDate = 4;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public long getCreateDate() {
        return createDate_;
      }
      /**
       * <code>optional int64 CreateDate = 4;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public Builder setCreateDate(long value) {
        bitField0_ |= 0x00000008;
        createDate_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 CreateDate = 4;</code>
       *
       * <pre>
       ** DateTime.Ticks (.NET framework). 
       * </pre>
       */
      public Builder clearCreateDate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        createDate_ = 0L;
        
        return this;
      }

      // optional int32 Version = 5;
      private int version_ ;
      /**
       * <code>optional int32 Version = 5;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 Version = 5;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional int32 Version = 5;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000010;
        version_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 Version = 5;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000010);
        version_ = 0;
        
        return this;
      }

      // optional bytes ConfigurationFile = 6;
      private com.google.protobuf.ByteString configurationFile_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes ConfigurationFile = 6;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public boolean hasConfigurationFile() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes ConfigurationFile = 6;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public com.google.protobuf.ByteString getConfigurationFile() {
        return configurationFile_;
      }
      /**
       * <code>optional bytes ConfigurationFile = 6;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public Builder setConfigurationFile(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        configurationFile_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes ConfigurationFile = 6;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public Builder clearConfigurationFile() {
        bitField0_ = (bitField0_ & ~0x00000020);
        configurationFile_ = getDefaultInstance().getConfigurationFile();
        
        return this;
      }

      // optional bytes Preferences = 7;
      private com.google.protobuf.ByteString preferences_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes Preferences = 7;</code>
       *
       * <pre>
       ** Android Preferences. 
       * </pre>
       */
      public boolean hasPreferences() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bytes Preferences = 7;</code>
       *
       * <pre>
       ** Android Preferences. 
       * </pre>
       */
      public com.google.protobuf.ByteString getPreferences() {
        return preferences_;
      }
      /**
       * <code>optional bytes Preferences = 7;</code>
       *
       * <pre>
       ** Android Preferences. 
       * </pre>
       */
      public Builder setPreferences(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        preferences_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes Preferences = 7;</code>
       *
       * <pre>
       ** Android Preferences. 
       * </pre>
       */
      public Builder clearPreferences() {
        bitField0_ = (bitField0_ & ~0x00000040);
        preferences_ = getDefaultInstance().getPreferences();
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.RowPlcConfiguration)
    }

    static {
      defaultInstance = new RowPlcConfiguration(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.RowPlcConfiguration)
  }

  public interface ConfigurationOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional string DeviceId = 1;
    /**
     * <code>optional string DeviceId = 1;</code>
     *
     * <pre>
     ** Id of the device, or, name of the user. 
     * </pre>
     */
    boolean hasDeviceId();
    /**
     * <code>optional string DeviceId = 1;</code>
     *
     * <pre>
     ** Id of the device, or, name of the user. 
     * </pre>
     */
    java.lang.String getDeviceId();
    /**
     * <code>optional string DeviceId = 1;</code>
     *
     * <pre>
     ** Id of the device, or, name of the user. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getDeviceIdBytes();

    // optional int32 Version = 2;
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    int getVersion();

    // optional bytes ConfigurationFile = 3;
    /**
     * <code>optional bytes ConfigurationFile = 3;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    boolean hasConfigurationFile();
    /**
     * <code>optional bytes ConfigurationFile = 3;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    com.google.protobuf.ByteString getConfigurationFile();

    // optional string Password = 4;
    /**
     * <code>optional string Password = 4;</code>
     *
     * <pre>
     ** Credentials: password of the user. 
     * </pre>
     */
    boolean hasPassword();
    /**
     * <code>optional string Password = 4;</code>
     *
     * <pre>
     ** Credentials: password of the user. 
     * </pre>
     */
    java.lang.String getPassword();
    /**
     * <code>optional string Password = 4;</code>
     *
     * <pre>
     ** Credentials: password of the user. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getPasswordBytes();

    // optional bytes Preferences = 5;
    /**
     * <code>optional bytes Preferences = 5;</code>
     *
     * <pre>
     ** Android Preferences, if applicable. 
     * </pre>
     */
    boolean hasPreferences();
    /**
     * <code>optional bytes Preferences = 5;</code>
     *
     * <pre>
     ** Android Preferences, if applicable. 
     * </pre>
     */
    com.google.protobuf.ByteString getPreferences();
  }
  /**
   * Protobuf type {@code communication.Configuration}
   */
  public static final class Configuration extends
      com.google.protobuf.GeneratedMessageLite
      implements ConfigurationOrBuilder {
    // Use Configuration.newBuilder() to construct.
    private Configuration(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Configuration(boolean noInit) {}

    private static final Configuration defaultInstance;
    public static Configuration getDefaultInstance() {
      return defaultInstance;
    }

    public Configuration getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Configuration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              deviceId_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              version_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              configurationFile_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              password_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              preferences_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Configuration> PARSER =
        new com.google.protobuf.AbstractParser<Configuration>() {
      public Configuration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Configuration(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Configuration> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string DeviceId = 1;
    public static final int DEVICEID_FIELD_NUMBER = 1;
    private java.lang.Object deviceId_;
    /**
     * <code>optional string DeviceId = 1;</code>
     *
     * <pre>
     ** Id of the device, or, name of the user. 
     * </pre>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string DeviceId = 1;</code>
     *
     * <pre>
     ** Id of the device, or, name of the user. 
     * </pre>
     */
    public java.lang.String getDeviceId() {
      java.lang.Object ref = deviceId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          deviceId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string DeviceId = 1;</code>
     *
     * <pre>
     ** Id of the device, or, name of the user. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeviceIdBytes() {
      java.lang.Object ref = deviceId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 Version = 2;
    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_;
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 Version = 2;</code>
     *
     * <pre>
     ** Configuration version. 
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    // optional bytes ConfigurationFile = 3;
    public static final int CONFIGURATIONFILE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString configurationFile_;
    /**
     * <code>optional bytes ConfigurationFile = 3;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    public boolean hasConfigurationFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes ConfigurationFile = 3;</code>
     *
     * <pre>
     ** Configuration file. 
     * </pre>
     */
    public com.google.protobuf.ByteString getConfigurationFile() {
      return configurationFile_;
    }

    // optional string Password = 4;
    public static final int PASSWORD_FIELD_NUMBER = 4;
    private java.lang.Object password_;
    /**
     * <code>optional string Password = 4;</code>
     *
     * <pre>
     ** Credentials: password of the user. 
     * </pre>
     */
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string Password = 4;</code>
     *
     * <pre>
     ** Credentials: password of the user. 
     * </pre>
     */
    public java.lang.String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          password_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string Password = 4;</code>
     *
     * <pre>
     ** Credentials: password of the user. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bytes Preferences = 5;
    public static final int PREFERENCES_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString preferences_;
    /**
     * <code>optional bytes Preferences = 5;</code>
     *
     * <pre>
     ** Android Preferences, if applicable. 
     * </pre>
     */
    public boolean hasPreferences() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes Preferences = 5;</code>
     *
     * <pre>
     ** Android Preferences, if applicable. 
     * </pre>
     */
    public com.google.protobuf.ByteString getPreferences() {
      return preferences_;
    }

    private void initFields() {
      deviceId_ = "";
      version_ = 0;
      configurationFile_ = com.google.protobuf.ByteString.EMPTY;
      password_ = "";
      preferences_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getDeviceIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, configurationFile_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getPasswordBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, preferences_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getDeviceIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, configurationFile_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getPasswordBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, preferences_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Configuration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.Configuration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.Configuration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.Configuration, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.ConfigurationOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.Configuration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deviceId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        configurationFile_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        preferences_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.Configuration getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.Configuration build() {
        com.errapartengineering.plcengine.PlcCommunication.Configuration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.Configuration buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.Configuration result = new com.errapartengineering.plcengine.PlcCommunication.Configuration(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceId_ = deviceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.configurationFile_ = configurationFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.password_ = password_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.preferences_ = preferences_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.Configuration other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance()) return this;
        if (other.hasDeviceId()) {
          bitField0_ |= 0x00000001;
          deviceId_ = other.deviceId_;
          
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasConfigurationFile()) {
          setConfigurationFile(other.getConfigurationFile());
        }
        if (other.hasPassword()) {
          bitField0_ |= 0x00000008;
          password_ = other.password_;
          
        }
        if (other.hasPreferences()) {
          setPreferences(other.getPreferences());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.Configuration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.Configuration) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string DeviceId = 1;
      private java.lang.Object deviceId_ = "";
      /**
       * <code>optional string DeviceId = 1;</code>
       *
       * <pre>
       ** Id of the device, or, name of the user. 
       * </pre>
       */
      public boolean hasDeviceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string DeviceId = 1;</code>
       *
       * <pre>
       ** Id of the device, or, name of the user. 
       * </pre>
       */
      public java.lang.String getDeviceId() {
        java.lang.Object ref = deviceId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          deviceId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string DeviceId = 1;</code>
       *
       * <pre>
       ** Id of the device, or, name of the user. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeviceIdBytes() {
        java.lang.Object ref = deviceId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string DeviceId = 1;</code>
       *
       * <pre>
       ** Id of the device, or, name of the user. 
       * </pre>
       */
      public Builder setDeviceId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        deviceId_ = value;
        
        return this;
      }
      /**
       * <code>optional string DeviceId = 1;</code>
       *
       * <pre>
       ** Id of the device, or, name of the user. 
       * </pre>
       */
      public Builder clearDeviceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceId_ = getDefaultInstance().getDeviceId();
        
        return this;
      }
      /**
       * <code>optional string DeviceId = 1;</code>
       *
       * <pre>
       ** Id of the device, or, name of the user. 
       * </pre>
       */
      public Builder setDeviceIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        deviceId_ = value;
        
        return this;
      }

      // optional int32 Version = 2;
      private int version_ ;
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000002;
        version_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 Version = 2;</code>
       *
       * <pre>
       ** Configuration version. 
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        
        return this;
      }

      // optional bytes ConfigurationFile = 3;
      private com.google.protobuf.ByteString configurationFile_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes ConfigurationFile = 3;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public boolean hasConfigurationFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes ConfigurationFile = 3;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public com.google.protobuf.ByteString getConfigurationFile() {
        return configurationFile_;
      }
      /**
       * <code>optional bytes ConfigurationFile = 3;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public Builder setConfigurationFile(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        configurationFile_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes ConfigurationFile = 3;</code>
       *
       * <pre>
       ** Configuration file. 
       * </pre>
       */
      public Builder clearConfigurationFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        configurationFile_ = getDefaultInstance().getConfigurationFile();
        
        return this;
      }

      // optional string Password = 4;
      private java.lang.Object password_ = "";
      /**
       * <code>optional string Password = 4;</code>
       *
       * <pre>
       ** Credentials: password of the user. 
       * </pre>
       */
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string Password = 4;</code>
       *
       * <pre>
       ** Credentials: password of the user. 
       * </pre>
       */
      public java.lang.String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Password = 4;</code>
       *
       * <pre>
       ** Credentials: password of the user. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPasswordBytes() {
        java.lang.Object ref = password_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          password_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Password = 4;</code>
       *
       * <pre>
       ** Credentials: password of the user. 
       * </pre>
       */
      public Builder setPassword(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        password_ = value;
        
        return this;
      }
      /**
       * <code>optional string Password = 4;</code>
       *
       * <pre>
       ** Credentials: password of the user. 
       * </pre>
       */
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000008);
        password_ = getDefaultInstance().getPassword();
        
        return this;
      }
      /**
       * <code>optional string Password = 4;</code>
       *
       * <pre>
       ** Credentials: password of the user. 
       * </pre>
       */
      public Builder setPasswordBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        password_ = value;
        
        return this;
      }

      // optional bytes Preferences = 5;
      private com.google.protobuf.ByteString preferences_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes Preferences = 5;</code>
       *
       * <pre>
       ** Android Preferences, if applicable. 
       * </pre>
       */
      public boolean hasPreferences() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes Preferences = 5;</code>
       *
       * <pre>
       ** Android Preferences, if applicable. 
       * </pre>
       */
      public com.google.protobuf.ByteString getPreferences() {
        return preferences_;
      }
      /**
       * <code>optional bytes Preferences = 5;</code>
       *
       * <pre>
       ** Android Preferences, if applicable. 
       * </pre>
       */
      public Builder setPreferences(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        preferences_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes Preferences = 5;</code>
       *
       * <pre>
       ** Android Preferences, if applicable. 
       * </pre>
       */
      public Builder clearPreferences() {
        bitField0_ = (bitField0_ & ~0x00000010);
        preferences_ = getDefaultInstance().getPreferences();
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.Configuration)
    }

    static {
      defaultInstance = new Configuration(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.Configuration)
  }

  public interface ResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional bool OK = 1;
    /**
     * <code>optional bool OK = 1;</code>
     */
    boolean hasOK();
    /**
     * <code>optional bool OK = 1;</code>
     */
    boolean getOK();

    // optional string Message = 2;
    /**
     * <code>optional string Message = 2;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional string Message = 2;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>optional string Message = 2;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code communication.Response}
   */
  public static final class Response extends
      com.google.protobuf.GeneratedMessageLite
      implements ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Response(boolean noInit) {}

    private static final Response defaultInstance;
    public static Response getDefaultInstance() {
      return defaultInstance;
    }

    public Response getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              oK_ = input.readBool();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              message_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Response> PARSER =
        new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Response(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool OK = 1;
    public static final int OK_FIELD_NUMBER = 1;
    private boolean oK_;
    /**
     * <code>optional bool OK = 1;</code>
     */
    public boolean hasOK() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool OK = 1;</code>
     */
    public boolean getOK() {
      return oK_;
    }

    // optional string Message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.Object message_;
    /**
     * <code>optional string Message = 2;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string Message = 2;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string Message = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      oK_ = false;
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, oK_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getMessageBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, oK_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getMessageBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.Response prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.Response, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.ResponseOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        oK_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.Response getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.Response build() {
        com.errapartengineering.plcengine.PlcCommunication.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.Response buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.Response result = new com.errapartengineering.plcengine.PlcCommunication.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.oK_ = oK_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.Response other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance()) return this;
        if (other.hasOK()) {
          setOK(other.getOK());
        }
        if (other.hasMessage()) {
          bitField0_ |= 0x00000002;
          message_ = other.message_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool OK = 1;
      private boolean oK_ ;
      /**
       * <code>optional bool OK = 1;</code>
       */
      public boolean hasOK() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool OK = 1;</code>
       */
      public boolean getOK() {
        return oK_;
      }
      /**
       * <code>optional bool OK = 1;</code>
       */
      public Builder setOK(boolean value) {
        bitField0_ |= 0x00000001;
        oK_ = value;
        
        return this;
      }
      /**
       * <code>optional bool OK = 1;</code>
       */
      public Builder clearOK() {
        bitField0_ = (bitField0_ & ~0x00000001);
        oK_ = false;
        
        return this;
      }

      // optional string Message = 2;
      private java.lang.Object message_ = "";
      /**
       * <code>optional string Message = 2;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string Message = 2;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Message = 2;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        
        return this;
      }
      /**
       * <code>optional string Message = 2;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        
        return this;
      }
      /**
       * <code>optional string Message = 2;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.Response)
    }

    static {
      defaultInstance = new Response(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.Response)
  }

  public interface DbRangeQueryOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int64 FirstTimeTicks = 1;
    /**
     * <code>optional int64 FirstTimeTicks = 1;</code>
     *
     * <pre>
     ** First time, .NET Ticks. 
     * </pre>
     */
    boolean hasFirstTimeTicks();
    /**
     * <code>optional int64 FirstTimeTicks = 1;</code>
     *
     * <pre>
     ** First time, .NET Ticks. 
     * </pre>
     */
    long getFirstTimeTicks();

    // optional int64 LastTimeTicks = 2;
    /**
     * <code>optional int64 LastTimeTicks = 2;</code>
     *
     * <pre>
     ** Last time, .NET Ticks. When missing, the query is open-ended. 
     * </pre>
     */
    boolean hasLastTimeTicks();
    /**
     * <code>optional int64 LastTimeTicks = 2;</code>
     *
     * <pre>
     ** Last time, .NET Ticks. When missing, the query is open-ended. 
     * </pre>
     */
    long getLastTimeTicks();
  }
  /**
   * Protobuf type {@code communication.DbRangeQuery}
   *
   * <pre>
   ** Query the range of the DB. 
   * </pre>
   */
  public static final class DbRangeQuery extends
      com.google.protobuf.GeneratedMessageLite
      implements DbRangeQueryOrBuilder {
    // Use DbRangeQuery.newBuilder() to construct.
    private DbRangeQuery(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private DbRangeQuery(boolean noInit) {}

    private static final DbRangeQuery defaultInstance;
    public static DbRangeQuery getDefaultInstance() {
      return defaultInstance;
    }

    public DbRangeQuery getDefaultInstanceForType() {
      return defaultInstance;
    }

    private DbRangeQuery(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              firstTimeTicks_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              lastTimeTicks_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<DbRangeQuery> PARSER =
        new com.google.protobuf.AbstractParser<DbRangeQuery>() {
      public DbRangeQuery parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DbRangeQuery(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DbRangeQuery> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 FirstTimeTicks = 1;
    public static final int FIRSTTIMETICKS_FIELD_NUMBER = 1;
    private long firstTimeTicks_;
    /**
     * <code>optional int64 FirstTimeTicks = 1;</code>
     *
     * <pre>
     ** First time, .NET Ticks. 
     * </pre>
     */
    public boolean hasFirstTimeTicks() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 FirstTimeTicks = 1;</code>
     *
     * <pre>
     ** First time, .NET Ticks. 
     * </pre>
     */
    public long getFirstTimeTicks() {
      return firstTimeTicks_;
    }

    // optional int64 LastTimeTicks = 2;
    public static final int LASTTIMETICKS_FIELD_NUMBER = 2;
    private long lastTimeTicks_;
    /**
     * <code>optional int64 LastTimeTicks = 2;</code>
     *
     * <pre>
     ** Last time, .NET Ticks. When missing, the query is open-ended. 
     * </pre>
     */
    public boolean hasLastTimeTicks() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 LastTimeTicks = 2;</code>
     *
     * <pre>
     ** Last time, .NET Ticks. When missing, the query is open-ended. 
     * </pre>
     */
    public long getLastTimeTicks() {
      return lastTimeTicks_;
    }

    private void initFields() {
      firstTimeTicks_ = 0L;
      lastTimeTicks_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, firstTimeTicks_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, lastTimeTicks_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, firstTimeTicks_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, lastTimeTicks_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.DbRangeQuery}
     *
     * <pre>
     ** Query the range of the DB. 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.DbRangeQueryOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        firstTimeTicks_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        lastTimeTicks_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery build() {
        com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery result = new com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.firstTimeTicks_ = firstTimeTicks_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lastTimeTicks_ = lastTimeTicks_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance()) return this;
        if (other.hasFirstTimeTicks()) {
          setFirstTimeTicks(other.getFirstTimeTicks());
        }
        if (other.hasLastTimeTicks()) {
          setLastTimeTicks(other.getLastTimeTicks());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 FirstTimeTicks = 1;
      private long firstTimeTicks_ ;
      /**
       * <code>optional int64 FirstTimeTicks = 1;</code>
       *
       * <pre>
       ** First time, .NET Ticks. 
       * </pre>
       */
      public boolean hasFirstTimeTicks() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 FirstTimeTicks = 1;</code>
       *
       * <pre>
       ** First time, .NET Ticks. 
       * </pre>
       */
      public long getFirstTimeTicks() {
        return firstTimeTicks_;
      }
      /**
       * <code>optional int64 FirstTimeTicks = 1;</code>
       *
       * <pre>
       ** First time, .NET Ticks. 
       * </pre>
       */
      public Builder setFirstTimeTicks(long value) {
        bitField0_ |= 0x00000001;
        firstTimeTicks_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 FirstTimeTicks = 1;</code>
       *
       * <pre>
       ** First time, .NET Ticks. 
       * </pre>
       */
      public Builder clearFirstTimeTicks() {
        bitField0_ = (bitField0_ & ~0x00000001);
        firstTimeTicks_ = 0L;
        
        return this;
      }

      // optional int64 LastTimeTicks = 2;
      private long lastTimeTicks_ ;
      /**
       * <code>optional int64 LastTimeTicks = 2;</code>
       *
       * <pre>
       ** Last time, .NET Ticks. When missing, the query is open-ended. 
       * </pre>
       */
      public boolean hasLastTimeTicks() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 LastTimeTicks = 2;</code>
       *
       * <pre>
       ** Last time, .NET Ticks. When missing, the query is open-ended. 
       * </pre>
       */
      public long getLastTimeTicks() {
        return lastTimeTicks_;
      }
      /**
       * <code>optional int64 LastTimeTicks = 2;</code>
       *
       * <pre>
       ** Last time, .NET Ticks. When missing, the query is open-ended. 
       * </pre>
       */
      public Builder setLastTimeTicks(long value) {
        bitField0_ |= 0x00000002;
        lastTimeTicks_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 LastTimeTicks = 2;</code>
       *
       * <pre>
       ** Last time, .NET Ticks. When missing, the query is open-ended. 
       * </pre>
       */
      public Builder clearLastTimeTicks() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lastTimeTicks_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.DbRangeQuery)
    }

    static {
      defaultInstance = new DbRangeQuery(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.DbRangeQuery)
  }

  public interface MessageToPlcOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional int64 Id = 1;
    /**
     * <code>optional int64 Id = 1;</code>
     *
     * <pre>
     ** Request Id; or unique negative OOB ID 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int64 Id = 1;</code>
     *
     * <pre>
     ** Request Id; or unique negative OOB ID 
     * </pre>
     */
    long getId();

    // repeated .communication.SignalAndValue SetSignals = 2;
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    java.util.List<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue> 
        getSetSignalsList();
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.SignalAndValue getSetSignals(int index);
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    int getSetSignalsCount();

    // optional .communication.IdRange QueryDatabaseRows = 3;
    /**
     * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
     *
     * <pre>
     ** Range of database ID-s to query. 
     * </pre>
     */
    boolean hasQueryDatabaseRows();
    /**
     * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
     *
     * <pre>
     ** Range of database ID-s to query. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.IdRange getQueryDatabaseRows();

    // repeated int32 MonitorUsers = 4;
    /**
     * <code>repeated int32 MonitorUsers = 4;</code>
     *
     * <pre>
     ** List of PLC-s to monitor. 
     * </pre>
     */
    java.util.List<java.lang.Integer> getMonitorUsersList();
    /**
     * <code>repeated int32 MonitorUsers = 4;</code>
     *
     * <pre>
     ** List of PLC-s to monitor. 
     * </pre>
     */
    int getMonitorUsersCount();
    /**
     * <code>repeated int32 MonitorUsers = 4;</code>
     *
     * <pre>
     ** List of PLC-s to monitor. 
     * </pre>
     */
    int getMonitorUsers(int index);

    // optional int32 ForwardToPlcId = 5;
    /**
     * <code>optional int32 ForwardToPlcId = 5;</code>
     *
     * <pre>
     ** Admin: Forward the rest of the message to the given PLC, if any. 
     * </pre>
     */
    boolean hasForwardToPlcId();
    /**
     * <code>optional int32 ForwardToPlcId = 5;</code>
     *
     * <pre>
     ** Admin: Forward the rest of the message to the given PLC, if any. 
     * </pre>
     */
    int getForwardToPlcId();

    // optional int32 SourceUserId = 6;
    /**
     * <code>optional int32 SourceUserId = 6;</code>
     *
     * <pre>
     ** Admin: Source User Id, if any. 
     * </pre>
     */
    boolean hasSourceUserId();
    /**
     * <code>optional int32 SourceUserId = 6;</code>
     *
     * <pre>
     ** Admin: Source User Id, if any. 
     * </pre>
     */
    int getSourceUserId();

    // optional int32 QueryLatestRowPlcConfiguration = 7;
    /**
     * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
     *
     * <pre>
     ** Admin: Query latest configuration row for the given user. 
     * </pre>
     */
    boolean hasQueryLatestRowPlcConfiguration();
    /**
     * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
     *
     * <pre>
     ** Admin: Query latest configuration row for the given user. 
     * </pre>
     */
    int getQueryLatestRowPlcConfiguration();

    // optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;
    /**
     * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
     *
     * <pre>
     ** Admin: New configuration to the PLC. 
     * </pre>
     */
    boolean hasNewRowPlcConfiguration();
    /**
     * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
     *
     * <pre>
     ** Admin: New configuration to the PLC. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getNewRowPlcConfiguration();

    // optional .communication.COMMAND Command = 9 [default = NOP];
    /**
     * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    boolean hasCommand();
    /**
     * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.COMMAND getCommand();

    // optional int32 TargetPlcId = 10;
    /**
     * <code>optional int32 TargetPlcId = 10;</code>
     *
     * <pre>
     ** Target PLC Id (for example, for the QueryDbRange command. 
     * </pre>
     */
    boolean hasTargetPlcId();
    /**
     * <code>optional int32 TargetPlcId = 10;</code>
     *
     * <pre>
     ** Target PLC Id (for example, for the QueryDbRange command. 
     * </pre>
     */
    int getTargetPlcId();

    // optional .communication.DbRangeQuery QueryDbRange = 11;
    /**
     * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
     *
     * <pre>
     ** Query the range of DB id-s, if any. 
     * </pre>
     */
    boolean hasQueryDbRange();
    /**
     * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
     *
     * <pre>
     ** Query the range of DB id-s, if any. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery getQueryDbRange();
  }
  /**
   * Protobuf type {@code communication.MessageToPlc}
   *
   * <pre>
   * TODO: Perhaps better name is 'MessageToSlave'.
   * </pre>
   */
  public static final class MessageToPlc extends
      com.google.protobuf.GeneratedMessageLite
      implements MessageToPlcOrBuilder {
    // Use MessageToPlc.newBuilder() to construct.
    private MessageToPlc(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private MessageToPlc(boolean noInit) {}

    private static final MessageToPlc defaultInstance;
    public static MessageToPlc getDefaultInstance() {
      return defaultInstance;
    }

    public MessageToPlc getDefaultInstanceForType() {
      return defaultInstance;
    }

    private MessageToPlc(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                setSignals_ = new java.util.ArrayList<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue>();
                mutable_bitField0_ |= 0x00000002;
              }
              setSignals_.add(input.readMessage(com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              com.errapartengineering.plcengine.PlcCommunication.IdRange.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = queryDatabaseRows_.toBuilder();
              }
              queryDatabaseRows_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.IdRange.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(queryDatabaseRows_);
                queryDatabaseRows_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                monitorUsers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              monitorUsers_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                monitorUsers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                monitorUsers_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              forwardToPlcId_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              sourceUserId_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              queryLatestRowPlcConfiguration_ = input.readInt32();
              break;
            }
            case 66: {
              com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = newRowPlcConfiguration_.toBuilder();
              }
              newRowPlcConfiguration_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(newRowPlcConfiguration_);
                newRowPlcConfiguration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              com.errapartengineering.plcengine.PlcCommunication.COMMAND value = com.errapartengineering.plcengine.PlcCommunication.COMMAND.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000040;
                command_ = value;
              }
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              targetPlcId_ = input.readInt32();
              break;
            }
            case 90: {
              com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = queryDbRange_.toBuilder();
              }
              queryDbRange_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(queryDbRange_);
                queryDbRange_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          setSignals_ = java.util.Collections.unmodifiableList(setSignals_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          monitorUsers_ = java.util.Collections.unmodifiableList(monitorUsers_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MessageToPlc> PARSER =
        new com.google.protobuf.AbstractParser<MessageToPlc>() {
      public MessageToPlc parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MessageToPlc(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MessageToPlc> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>optional int64 Id = 1;</code>
     *
     * <pre>
     ** Request Id; or unique negative OOB ID 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 Id = 1;</code>
     *
     * <pre>
     ** Request Id; or unique negative OOB ID 
     * </pre>
     */
    public long getId() {
      return id_;
    }

    // repeated .communication.SignalAndValue SetSignals = 2;
    public static final int SETSIGNALS_FIELD_NUMBER = 2;
    private java.util.List<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue> setSignals_;
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    public java.util.List<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue> getSetSignalsList() {
      return setSignals_;
    }
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    public java.util.List<? extends com.errapartengineering.plcengine.PlcCommunication.SignalAndValueOrBuilder> 
        getSetSignalsOrBuilderList() {
      return setSignals_;
    }
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    public int getSetSignalsCount() {
      return setSignals_.size();
    }
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.SignalAndValue getSetSignals(int index) {
      return setSignals_.get(index);
    }
    /**
     * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
     *
     * <pre>
     ** List of signals to be set. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.SignalAndValueOrBuilder getSetSignalsOrBuilder(
        int index) {
      return setSignals_.get(index);
    }

    // optional .communication.IdRange QueryDatabaseRows = 3;
    public static final int QUERYDATABASEROWS_FIELD_NUMBER = 3;
    private com.errapartengineering.plcengine.PlcCommunication.IdRange queryDatabaseRows_;
    /**
     * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
     *
     * <pre>
     ** Range of database ID-s to query. 
     * </pre>
     */
    public boolean hasQueryDatabaseRows() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
     *
     * <pre>
     ** Range of database ID-s to query. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.IdRange getQueryDatabaseRows() {
      return queryDatabaseRows_;
    }

    // repeated int32 MonitorUsers = 4;
    public static final int MONITORUSERS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> monitorUsers_;
    /**
     * <code>repeated int32 MonitorUsers = 4;</code>
     *
     * <pre>
     ** List of PLC-s to monitor. 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMonitorUsersList() {
      return monitorUsers_;
    }
    /**
     * <code>repeated int32 MonitorUsers = 4;</code>
     *
     * <pre>
     ** List of PLC-s to monitor. 
     * </pre>
     */
    public int getMonitorUsersCount() {
      return monitorUsers_.size();
    }
    /**
     * <code>repeated int32 MonitorUsers = 4;</code>
     *
     * <pre>
     ** List of PLC-s to monitor. 
     * </pre>
     */
    public int getMonitorUsers(int index) {
      return monitorUsers_.get(index);
    }

    // optional int32 ForwardToPlcId = 5;
    public static final int FORWARDTOPLCID_FIELD_NUMBER = 5;
    private int forwardToPlcId_;
    /**
     * <code>optional int32 ForwardToPlcId = 5;</code>
     *
     * <pre>
     ** Admin: Forward the rest of the message to the given PLC, if any. 
     * </pre>
     */
    public boolean hasForwardToPlcId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 ForwardToPlcId = 5;</code>
     *
     * <pre>
     ** Admin: Forward the rest of the message to the given PLC, if any. 
     * </pre>
     */
    public int getForwardToPlcId() {
      return forwardToPlcId_;
    }

    // optional int32 SourceUserId = 6;
    public static final int SOURCEUSERID_FIELD_NUMBER = 6;
    private int sourceUserId_;
    /**
     * <code>optional int32 SourceUserId = 6;</code>
     *
     * <pre>
     ** Admin: Source User Id, if any. 
     * </pre>
     */
    public boolean hasSourceUserId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 SourceUserId = 6;</code>
     *
     * <pre>
     ** Admin: Source User Id, if any. 
     * </pre>
     */
    public int getSourceUserId() {
      return sourceUserId_;
    }

    // optional int32 QueryLatestRowPlcConfiguration = 7;
    public static final int QUERYLATESTROWPLCCONFIGURATION_FIELD_NUMBER = 7;
    private int queryLatestRowPlcConfiguration_;
    /**
     * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
     *
     * <pre>
     ** Admin: Query latest configuration row for the given user. 
     * </pre>
     */
    public boolean hasQueryLatestRowPlcConfiguration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
     *
     * <pre>
     ** Admin: Query latest configuration row for the given user. 
     * </pre>
     */
    public int getQueryLatestRowPlcConfiguration() {
      return queryLatestRowPlcConfiguration_;
    }

    // optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;
    public static final int NEWROWPLCCONFIGURATION_FIELD_NUMBER = 8;
    private com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration newRowPlcConfiguration_;
    /**
     * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
     *
     * <pre>
     ** Admin: New configuration to the PLC. 
     * </pre>
     */
    public boolean hasNewRowPlcConfiguration() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
     *
     * <pre>
     ** Admin: New configuration to the PLC. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getNewRowPlcConfiguration() {
      return newRowPlcConfiguration_;
    }

    // optional .communication.COMMAND Command = 9 [default = NOP];
    public static final int COMMAND_FIELD_NUMBER = 9;
    private com.errapartengineering.plcengine.PlcCommunication.COMMAND command_;
    /**
     * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.COMMAND getCommand() {
      return command_;
    }

    // optional int32 TargetPlcId = 10;
    public static final int TARGETPLCID_FIELD_NUMBER = 10;
    private int targetPlcId_;
    /**
     * <code>optional int32 TargetPlcId = 10;</code>
     *
     * <pre>
     ** Target PLC Id (for example, for the QueryDbRange command. 
     * </pre>
     */
    public boolean hasTargetPlcId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 TargetPlcId = 10;</code>
     *
     * <pre>
     ** Target PLC Id (for example, for the QueryDbRange command. 
     * </pre>
     */
    public int getTargetPlcId() {
      return targetPlcId_;
    }

    // optional .communication.DbRangeQuery QueryDbRange = 11;
    public static final int QUERYDBRANGE_FIELD_NUMBER = 11;
    private com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery queryDbRange_;
    /**
     * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
     *
     * <pre>
     ** Query the range of DB id-s, if any. 
     * </pre>
     */
    public boolean hasQueryDbRange() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
     *
     * <pre>
     ** Query the range of DB id-s, if any. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery getQueryDbRange() {
      return queryDbRange_;
    }

    private void initFields() {
      id_ = 0L;
      setSignals_ = java.util.Collections.emptyList();
      queryDatabaseRows_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
      monitorUsers_ = java.util.Collections.emptyList();
      forwardToPlcId_ = 0;
      sourceUserId_ = 0;
      queryLatestRowPlcConfiguration_ = 0;
      newRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
      command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
      targetPlcId_ = 0;
      queryDbRange_ = com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, id_);
      }
      for (int i = 0; i < setSignals_.size(); i++) {
        output.writeMessage(2, setSignals_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, queryDatabaseRows_);
      }
      for (int i = 0; i < monitorUsers_.size(); i++) {
        output.writeInt32(4, monitorUsers_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, forwardToPlcId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, sourceUserId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, queryLatestRowPlcConfiguration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(8, newRowPlcConfiguration_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(9, command_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, targetPlcId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(11, queryDbRange_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      for (int i = 0; i < setSignals_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, setSignals_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, queryDatabaseRows_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < monitorUsers_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(monitorUsers_.get(i));
        }
        size += dataSize;
        size += 1 * getMonitorUsersList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, forwardToPlcId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, sourceUserId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, queryLatestRowPlcConfiguration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, newRowPlcConfiguration_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, command_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, targetPlcId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, queryDbRange_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.MessageToPlc prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.MessageToPlc}
     *
     * <pre>
     * TODO: Perhaps better name is 'MessageToSlave'.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.MessageToPlc, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.MessageToPlcOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.MessageToPlc.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        setSignals_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        queryDatabaseRows_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        monitorUsers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        forwardToPlcId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        sourceUserId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        queryLatestRowPlcConfiguration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        newRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
        bitField0_ = (bitField0_ & ~0x00000100);
        targetPlcId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        queryDbRange_ = com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.MessageToPlc getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.MessageToPlc.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.MessageToPlc build() {
        com.errapartengineering.plcengine.PlcCommunication.MessageToPlc result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.MessageToPlc buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.MessageToPlc result = new com.errapartengineering.plcengine.PlcCommunication.MessageToPlc(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          setSignals_ = java.util.Collections.unmodifiableList(setSignals_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.setSignals_ = setSignals_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.queryDatabaseRows_ = queryDatabaseRows_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          monitorUsers_ = java.util.Collections.unmodifiableList(monitorUsers_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.monitorUsers_ = monitorUsers_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.forwardToPlcId_ = forwardToPlcId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.sourceUserId_ = sourceUserId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.queryLatestRowPlcConfiguration_ = queryLatestRowPlcConfiguration_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.newRowPlcConfiguration_ = newRowPlcConfiguration_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.command_ = command_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.targetPlcId_ = targetPlcId_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.queryDbRange_ = queryDbRange_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.MessageToPlc other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.MessageToPlc.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (!other.setSignals_.isEmpty()) {
          if (setSignals_.isEmpty()) {
            setSignals_ = other.setSignals_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSetSignalsIsMutable();
            setSignals_.addAll(other.setSignals_);
          }
          
        }
        if (other.hasQueryDatabaseRows()) {
          mergeQueryDatabaseRows(other.getQueryDatabaseRows());
        }
        if (!other.monitorUsers_.isEmpty()) {
          if (monitorUsers_.isEmpty()) {
            monitorUsers_ = other.monitorUsers_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureMonitorUsersIsMutable();
            monitorUsers_.addAll(other.monitorUsers_);
          }
          
        }
        if (other.hasForwardToPlcId()) {
          setForwardToPlcId(other.getForwardToPlcId());
        }
        if (other.hasSourceUserId()) {
          setSourceUserId(other.getSourceUserId());
        }
        if (other.hasQueryLatestRowPlcConfiguration()) {
          setQueryLatestRowPlcConfiguration(other.getQueryLatestRowPlcConfiguration());
        }
        if (other.hasNewRowPlcConfiguration()) {
          mergeNewRowPlcConfiguration(other.getNewRowPlcConfiguration());
        }
        if (other.hasCommand()) {
          setCommand(other.getCommand());
        }
        if (other.hasTargetPlcId()) {
          setTargetPlcId(other.getTargetPlcId());
        }
        if (other.hasQueryDbRange()) {
          mergeQueryDbRange(other.getQueryDbRange());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.MessageToPlc parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.MessageToPlc) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 Id = 1;
      private long id_ ;
      /**
       * <code>optional int64 Id = 1;</code>
       *
       * <pre>
       ** Request Id; or unique negative OOB ID 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 Id = 1;</code>
       *
       * <pre>
       ** Request Id; or unique negative OOB ID 
       * </pre>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>optional int64 Id = 1;</code>
       *
       * <pre>
       ** Request Id; or unique negative OOB ID 
       * </pre>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 Id = 1;</code>
       *
       * <pre>
       ** Request Id; or unique negative OOB ID 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        
        return this;
      }

      // repeated .communication.SignalAndValue SetSignals = 2;
      private java.util.List<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue> setSignals_ =
        java.util.Collections.emptyList();
      private void ensureSetSignalsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          setSignals_ = new java.util.ArrayList<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue>(setSignals_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public java.util.List<com.errapartengineering.plcengine.PlcCommunication.SignalAndValue> getSetSignalsList() {
        return java.util.Collections.unmodifiableList(setSignals_);
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public int getSetSignalsCount() {
        return setSignals_.size();
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.SignalAndValue getSetSignals(int index) {
        return setSignals_.get(index);
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder setSetSignals(
          int index, com.errapartengineering.plcengine.PlcCommunication.SignalAndValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSetSignalsIsMutable();
        setSignals_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder setSetSignals(
          int index, com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.Builder builderForValue) {
        ensureSetSignalsIsMutable();
        setSignals_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder addSetSignals(com.errapartengineering.plcengine.PlcCommunication.SignalAndValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSetSignalsIsMutable();
        setSignals_.add(value);

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder addSetSignals(
          int index, com.errapartengineering.plcengine.PlcCommunication.SignalAndValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSetSignalsIsMutable();
        setSignals_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder addSetSignals(
          com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.Builder builderForValue) {
        ensureSetSignalsIsMutable();
        setSignals_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder addSetSignals(
          int index, com.errapartengineering.plcengine.PlcCommunication.SignalAndValue.Builder builderForValue) {
        ensureSetSignalsIsMutable();
        setSignals_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder addAllSetSignals(
          java.lang.Iterable<? extends com.errapartengineering.plcengine.PlcCommunication.SignalAndValue> values) {
        ensureSetSignalsIsMutable();
        super.addAll(values, setSignals_);

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder clearSetSignals() {
        setSignals_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .communication.SignalAndValue SetSignals = 2;</code>
       *
       * <pre>
       ** List of signals to be set. 
       * </pre>
       */
      public Builder removeSetSignals(int index) {
        ensureSetSignalsIsMutable();
        setSignals_.remove(index);

        return this;
      }

      // optional .communication.IdRange QueryDatabaseRows = 3;
      private com.errapartengineering.plcengine.PlcCommunication.IdRange queryDatabaseRows_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
      /**
       * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
       *
       * <pre>
       ** Range of database ID-s to query. 
       * </pre>
       */
      public boolean hasQueryDatabaseRows() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
       *
       * <pre>
       ** Range of database ID-s to query. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.IdRange getQueryDatabaseRows() {
        return queryDatabaseRows_;
      }
      /**
       * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
       *
       * <pre>
       ** Range of database ID-s to query. 
       * </pre>
       */
      public Builder setQueryDatabaseRows(com.errapartengineering.plcengine.PlcCommunication.IdRange value) {
        if (value == null) {
          throw new NullPointerException();
        }
        queryDatabaseRows_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
       *
       * <pre>
       ** Range of database ID-s to query. 
       * </pre>
       */
      public Builder setQueryDatabaseRows(
          com.errapartengineering.plcengine.PlcCommunication.IdRange.Builder builderForValue) {
        queryDatabaseRows_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
       *
       * <pre>
       ** Range of database ID-s to query. 
       * </pre>
       */
      public Builder mergeQueryDatabaseRows(com.errapartengineering.plcengine.PlcCommunication.IdRange value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            queryDatabaseRows_ != com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance()) {
          queryDatabaseRows_ =
            com.errapartengineering.plcengine.PlcCommunication.IdRange.newBuilder(queryDatabaseRows_).mergeFrom(value).buildPartial();
        } else {
          queryDatabaseRows_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .communication.IdRange QueryDatabaseRows = 3;</code>
       *
       * <pre>
       ** Range of database ID-s to query. 
       * </pre>
       */
      public Builder clearQueryDatabaseRows() {
        queryDatabaseRows_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // repeated int32 MonitorUsers = 4;
      private java.util.List<java.lang.Integer> monitorUsers_ = java.util.Collections.emptyList();
      private void ensureMonitorUsersIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          monitorUsers_ = new java.util.ArrayList<java.lang.Integer>(monitorUsers_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMonitorUsersList() {
        return java.util.Collections.unmodifiableList(monitorUsers_);
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public int getMonitorUsersCount() {
        return monitorUsers_.size();
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public int getMonitorUsers(int index) {
        return monitorUsers_.get(index);
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public Builder setMonitorUsers(
          int index, int value) {
        ensureMonitorUsersIsMutable();
        monitorUsers_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public Builder addMonitorUsers(int value) {
        ensureMonitorUsersIsMutable();
        monitorUsers_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public Builder addAllMonitorUsers(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMonitorUsersIsMutable();
        super.addAll(values, monitorUsers_);
        
        return this;
      }
      /**
       * <code>repeated int32 MonitorUsers = 4;</code>
       *
       * <pre>
       ** List of PLC-s to monitor. 
       * </pre>
       */
      public Builder clearMonitorUsers() {
        monitorUsers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      // optional int32 ForwardToPlcId = 5;
      private int forwardToPlcId_ ;
      /**
       * <code>optional int32 ForwardToPlcId = 5;</code>
       *
       * <pre>
       ** Admin: Forward the rest of the message to the given PLC, if any. 
       * </pre>
       */
      public boolean hasForwardToPlcId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 ForwardToPlcId = 5;</code>
       *
       * <pre>
       ** Admin: Forward the rest of the message to the given PLC, if any. 
       * </pre>
       */
      public int getForwardToPlcId() {
        return forwardToPlcId_;
      }
      /**
       * <code>optional int32 ForwardToPlcId = 5;</code>
       *
       * <pre>
       ** Admin: Forward the rest of the message to the given PLC, if any. 
       * </pre>
       */
      public Builder setForwardToPlcId(int value) {
        bitField0_ |= 0x00000010;
        forwardToPlcId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 ForwardToPlcId = 5;</code>
       *
       * <pre>
       ** Admin: Forward the rest of the message to the given PLC, if any. 
       * </pre>
       */
      public Builder clearForwardToPlcId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        forwardToPlcId_ = 0;
        
        return this;
      }

      // optional int32 SourceUserId = 6;
      private int sourceUserId_ ;
      /**
       * <code>optional int32 SourceUserId = 6;</code>
       *
       * <pre>
       ** Admin: Source User Id, if any. 
       * </pre>
       */
      public boolean hasSourceUserId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 SourceUserId = 6;</code>
       *
       * <pre>
       ** Admin: Source User Id, if any. 
       * </pre>
       */
      public int getSourceUserId() {
        return sourceUserId_;
      }
      /**
       * <code>optional int32 SourceUserId = 6;</code>
       *
       * <pre>
       ** Admin: Source User Id, if any. 
       * </pre>
       */
      public Builder setSourceUserId(int value) {
        bitField0_ |= 0x00000020;
        sourceUserId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 SourceUserId = 6;</code>
       *
       * <pre>
       ** Admin: Source User Id, if any. 
       * </pre>
       */
      public Builder clearSourceUserId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sourceUserId_ = 0;
        
        return this;
      }

      // optional int32 QueryLatestRowPlcConfiguration = 7;
      private int queryLatestRowPlcConfiguration_ ;
      /**
       * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
       *
       * <pre>
       ** Admin: Query latest configuration row for the given user. 
       * </pre>
       */
      public boolean hasQueryLatestRowPlcConfiguration() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
       *
       * <pre>
       ** Admin: Query latest configuration row for the given user. 
       * </pre>
       */
      public int getQueryLatestRowPlcConfiguration() {
        return queryLatestRowPlcConfiguration_;
      }
      /**
       * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
       *
       * <pre>
       ** Admin: Query latest configuration row for the given user. 
       * </pre>
       */
      public Builder setQueryLatestRowPlcConfiguration(int value) {
        bitField0_ |= 0x00000040;
        queryLatestRowPlcConfiguration_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 QueryLatestRowPlcConfiguration = 7;</code>
       *
       * <pre>
       ** Admin: Query latest configuration row for the given user. 
       * </pre>
       */
      public Builder clearQueryLatestRowPlcConfiguration() {
        bitField0_ = (bitField0_ & ~0x00000040);
        queryLatestRowPlcConfiguration_ = 0;
        
        return this;
      }

      // optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;
      private com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration newRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
      /**
       * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
       *
       * <pre>
       ** Admin: New configuration to the PLC. 
       * </pre>
       */
      public boolean hasNewRowPlcConfiguration() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
       *
       * <pre>
       ** Admin: New configuration to the PLC. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getNewRowPlcConfiguration() {
        return newRowPlcConfiguration_;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
       *
       * <pre>
       ** Admin: New configuration to the PLC. 
       * </pre>
       */
      public Builder setNewRowPlcConfiguration(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        newRowPlcConfiguration_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
       *
       * <pre>
       ** Admin: New configuration to the PLC. 
       * </pre>
       */
      public Builder setNewRowPlcConfiguration(
          com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.Builder builderForValue) {
        newRowPlcConfiguration_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
       *
       * <pre>
       ** Admin: New configuration to the PLC. 
       * </pre>
       */
      public Builder mergeNewRowPlcConfiguration(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            newRowPlcConfiguration_ != com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance()) {
          newRowPlcConfiguration_ =
            com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.newBuilder(newRowPlcConfiguration_).mergeFrom(value).buildPartial();
        } else {
          newRowPlcConfiguration_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration NewRowPlcConfiguration = 8;</code>
       *
       * <pre>
       ** Admin: New configuration to the PLC. 
       * </pre>
       */
      public Builder clearNewRowPlcConfiguration() {
        newRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // optional .communication.COMMAND Command = 9 [default = NOP];
      private com.errapartengineering.plcengine.PlcCommunication.COMMAND command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
      /**
       * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.COMMAND getCommand() {
        return command_;
      }
      /**
       * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public Builder setCommand(com.errapartengineering.plcengine.PlcCommunication.COMMAND value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        command_ = value;
        
        return this;
      }
      /**
       * <code>optional .communication.COMMAND Command = 9 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public Builder clearCommand() {
        bitField0_ = (bitField0_ & ~0x00000100);
        command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
        
        return this;
      }

      // optional int32 TargetPlcId = 10;
      private int targetPlcId_ ;
      /**
       * <code>optional int32 TargetPlcId = 10;</code>
       *
       * <pre>
       ** Target PLC Id (for example, for the QueryDbRange command. 
       * </pre>
       */
      public boolean hasTargetPlcId() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 TargetPlcId = 10;</code>
       *
       * <pre>
       ** Target PLC Id (for example, for the QueryDbRange command. 
       * </pre>
       */
      public int getTargetPlcId() {
        return targetPlcId_;
      }
      /**
       * <code>optional int32 TargetPlcId = 10;</code>
       *
       * <pre>
       ** Target PLC Id (for example, for the QueryDbRange command. 
       * </pre>
       */
      public Builder setTargetPlcId(int value) {
        bitField0_ |= 0x00000200;
        targetPlcId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 TargetPlcId = 10;</code>
       *
       * <pre>
       ** Target PLC Id (for example, for the QueryDbRange command. 
       * </pre>
       */
      public Builder clearTargetPlcId() {
        bitField0_ = (bitField0_ & ~0x00000200);
        targetPlcId_ = 0;
        
        return this;
      }

      // optional .communication.DbRangeQuery QueryDbRange = 11;
      private com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery queryDbRange_ = com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance();
      /**
       * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
       *
       * <pre>
       ** Query the range of DB id-s, if any. 
       * </pre>
       */
      public boolean hasQueryDbRange() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
       *
       * <pre>
       ** Query the range of DB id-s, if any. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery getQueryDbRange() {
        return queryDbRange_;
      }
      /**
       * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
       *
       * <pre>
       ** Query the range of DB id-s, if any. 
       * </pre>
       */
      public Builder setQueryDbRange(com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery value) {
        if (value == null) {
          throw new NullPointerException();
        }
        queryDbRange_ = value;

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
       *
       * <pre>
       ** Query the range of DB id-s, if any. 
       * </pre>
       */
      public Builder setQueryDbRange(
          com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.Builder builderForValue) {
        queryDbRange_ = builderForValue.build();

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
       *
       * <pre>
       ** Query the range of DB id-s, if any. 
       * </pre>
       */
      public Builder mergeQueryDbRange(com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery value) {
        if (((bitField0_ & 0x00000400) == 0x00000400) &&
            queryDbRange_ != com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance()) {
          queryDbRange_ =
            com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.newBuilder(queryDbRange_).mergeFrom(value).buildPartial();
        } else {
          queryDbRange_ = value;
        }

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .communication.DbRangeQuery QueryDbRange = 11;</code>
       *
       * <pre>
       ** Query the range of DB id-s, if any. 
       * </pre>
       */
      public Builder clearQueryDbRange() {
        queryDbRange_ = com.errapartengineering.plcengine.PlcCommunication.DbRangeQuery.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.MessageToPlc)
    }

    static {
      defaultInstance = new MessageToPlc(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.MessageToPlc)
  }

  public interface MessageFromPlcOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional sint64 Id = 1;
    /**
     * <code>optional sint64 Id = 1;</code>
     *
     * <pre>
     ** Equals to the corresponding request Id, or unique negative OOB ID. 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional sint64 Id = 1;</code>
     *
     * <pre>
     ** Equals to the corresponding request Id, or unique negative OOB ID. 
     * </pre>
     */
    long getId();

    // optional .communication.Response Response = 2;
    /**
     * <code>optional .communication.Response Response = 2;</code>
     *
     * <pre>
     ** Response, if any. 
     * </pre>
     */
    boolean hasResponse();
    /**
     * <code>optional .communication.Response Response = 2;</code>
     *
     * <pre>
     ** Response, if any. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.Response getResponse();

    // optional .communication.DatabaseRow OOBDatabaseRow = 3;
    /**
     * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
     *
     * <pre>
     ** Out-of-band database rows (signal values). 
     * </pre>
     */
    boolean hasOOBDatabaseRow();
    /**
     * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
     *
     * <pre>
     ** Out-of-band database rows (signal values). 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getOOBDatabaseRow();

    // optional .communication.Configuration OOBConfiguration = 4;
    /**
     * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
     *
     * <pre>
     ** Out-of-band configuration and/or password. 
     * </pre>
     */
    boolean hasOOBConfiguration();
    /**
     * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
     *
     * <pre>
     ** Out-of-band configuration and/or password. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.Configuration getOOBConfiguration();

    // optional .communication.IdRange OOBDatabaseRange = 5;
    /**
     * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
     *
     * <pre>
     ** Out-of-band PLC database id range. 
     * </pre>
     */
    boolean hasOOBDatabaseRange();
    /**
     * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
     *
     * <pre>
     ** Out-of-band PLC database id range. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.IdRange getOOBDatabaseRange();

    // repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    java.util.List<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow> 
        getResponseToDatabaseRowsList();
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getResponseToDatabaseRows(int index);
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    int getResponseToDatabaseRowsCount();

    // optional .communication.COMMAND Command = 7 [default = NOP];
    /**
     * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    boolean hasCommand();
    /**
     * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.COMMAND getCommand();

    // repeated .communication.RowUser OOBRowUsers = 8;
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    java.util.List<com.errapartengineering.plcengine.PlcCommunication.RowUser> 
        getOOBRowUsersList();
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.RowUser getOOBRowUsers(int index);
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    int getOOBRowUsersCount();

    // optional int32 SourceId = 9;
    /**
     * <code>optional int32 SourceId = 9;</code>
     *
     * <pre>
     ** Id of the originating PLC. 
     * </pre>
     */
    boolean hasSourceId();
    /**
     * <code>optional int32 SourceId = 9;</code>
     *
     * <pre>
     ** Id of the originating PLC. 
     * </pre>
     */
    int getSourceId();

    // optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;
    /**
     * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
     *
     * <pre>
     ** Admin: In response to QueryLatestRowPlcConfiguration. 
     * </pre>
     */
    boolean hasResponseToQueryLatestRowPlcConfiguration();
    /**
     * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
     *
     * <pre>
     ** Admin: In response to QueryLatestRowPlcConfiguration. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getResponseToQueryLatestRowPlcConfiguration();

    // optional .communication.IdRange ResponseToDbRangeQuery = 11;
    /**
     * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
     *
     * <pre>
     ** Response to the DbRangeQuery. 
     * </pre>
     */
    boolean hasResponseToDbRangeQuery();
    /**
     * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
     *
     * <pre>
     ** Response to the DbRangeQuery. 
     * </pre>
     */
    com.errapartengineering.plcengine.PlcCommunication.IdRange getResponseToDbRangeQuery();
  }
  /**
   * Protobuf type {@code communication.MessageFromPlc}
   *
   * <pre>
   * TODO: Perhaps better name is 'MessageFromSlave'.
   * </pre>
   */
  public static final class MessageFromPlc extends
      com.google.protobuf.GeneratedMessageLite
      implements MessageFromPlcOrBuilder {
    // Use MessageFromPlc.newBuilder() to construct.
    private MessageFromPlc(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private MessageFromPlc(boolean noInit) {}

    private static final MessageFromPlc defaultInstance;
    public static MessageFromPlc getDefaultInstance() {
      return defaultInstance;
    }

    public MessageFromPlc getDefaultInstanceForType() {
      return defaultInstance;
    }

    private MessageFromPlc(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readSInt64();
              break;
            }
            case 18: {
              com.errapartengineering.plcengine.PlcCommunication.Response.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = response_.toBuilder();
              }
              response_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.Response.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(response_);
                response_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = oOBDatabaseRow_.toBuilder();
              }
              oOBDatabaseRow_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(oOBDatabaseRow_);
                oOBDatabaseRow_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.errapartengineering.plcengine.PlcCommunication.Configuration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = oOBConfiguration_.toBuilder();
              }
              oOBConfiguration_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.Configuration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(oOBConfiguration_);
                oOBConfiguration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.errapartengineering.plcengine.PlcCommunication.IdRange.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = oOBDatabaseRange_.toBuilder();
              }
              oOBDatabaseRange_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.IdRange.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(oOBDatabaseRange_);
                oOBDatabaseRange_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                responseToDatabaseRows_ = new java.util.ArrayList<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow>();
                mutable_bitField0_ |= 0x00000020;
              }
              responseToDatabaseRows_.add(input.readMessage(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              com.errapartengineering.plcengine.PlcCommunication.COMMAND value = com.errapartengineering.plcengine.PlcCommunication.COMMAND.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000020;
                command_ = value;
              }
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                oOBRowUsers_ = new java.util.ArrayList<com.errapartengineering.plcengine.PlcCommunication.RowUser>();
                mutable_bitField0_ |= 0x00000080;
              }
              oOBRowUsers_.add(input.readMessage(com.errapartengineering.plcengine.PlcCommunication.RowUser.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              sourceId_ = input.readInt32();
              break;
            }
            case 82: {
              com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = responseToQueryLatestRowPlcConfiguration_.toBuilder();
              }
              responseToQueryLatestRowPlcConfiguration_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(responseToQueryLatestRowPlcConfiguration_);
                responseToQueryLatestRowPlcConfiguration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 90: {
              com.errapartengineering.plcengine.PlcCommunication.IdRange.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = responseToDbRangeQuery_.toBuilder();
              }
              responseToDbRangeQuery_ = input.readMessage(com.errapartengineering.plcengine.PlcCommunication.IdRange.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(responseToDbRangeQuery_);
                responseToDbRangeQuery_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          responseToDatabaseRows_ = java.util.Collections.unmodifiableList(responseToDatabaseRows_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          oOBRowUsers_ = java.util.Collections.unmodifiableList(oOBRowUsers_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MessageFromPlc> PARSER =
        new com.google.protobuf.AbstractParser<MessageFromPlc>() {
      public MessageFromPlc parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MessageFromPlc(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MessageFromPlc> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint64 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>optional sint64 Id = 1;</code>
     *
     * <pre>
     ** Equals to the corresponding request Id, or unique negative OOB ID. 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint64 Id = 1;</code>
     *
     * <pre>
     ** Equals to the corresponding request Id, or unique negative OOB ID. 
     * </pre>
     */
    public long getId() {
      return id_;
    }

    // optional .communication.Response Response = 2;
    public static final int RESPONSE_FIELD_NUMBER = 2;
    private com.errapartengineering.plcengine.PlcCommunication.Response response_;
    /**
     * <code>optional .communication.Response Response = 2;</code>
     *
     * <pre>
     ** Response, if any. 
     * </pre>
     */
    public boolean hasResponse() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .communication.Response Response = 2;</code>
     *
     * <pre>
     ** Response, if any. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.Response getResponse() {
      return response_;
    }

    // optional .communication.DatabaseRow OOBDatabaseRow = 3;
    public static final int OOBDATABASEROW_FIELD_NUMBER = 3;
    private com.errapartengineering.plcengine.PlcCommunication.DatabaseRow oOBDatabaseRow_;
    /**
     * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
     *
     * <pre>
     ** Out-of-band database rows (signal values). 
     * </pre>
     */
    public boolean hasOOBDatabaseRow() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
     *
     * <pre>
     ** Out-of-band database rows (signal values). 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getOOBDatabaseRow() {
      return oOBDatabaseRow_;
    }

    // optional .communication.Configuration OOBConfiguration = 4;
    public static final int OOBCONFIGURATION_FIELD_NUMBER = 4;
    private com.errapartengineering.plcengine.PlcCommunication.Configuration oOBConfiguration_;
    /**
     * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
     *
     * <pre>
     ** Out-of-band configuration and/or password. 
     * </pre>
     */
    public boolean hasOOBConfiguration() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
     *
     * <pre>
     ** Out-of-band configuration and/or password. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.Configuration getOOBConfiguration() {
      return oOBConfiguration_;
    }

    // optional .communication.IdRange OOBDatabaseRange = 5;
    public static final int OOBDATABASERANGE_FIELD_NUMBER = 5;
    private com.errapartengineering.plcengine.PlcCommunication.IdRange oOBDatabaseRange_;
    /**
     * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
     *
     * <pre>
     ** Out-of-band PLC database id range. 
     * </pre>
     */
    public boolean hasOOBDatabaseRange() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
     *
     * <pre>
     ** Out-of-band PLC database id range. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.IdRange getOOBDatabaseRange() {
      return oOBDatabaseRange_;
    }

    // repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;
    public static final int RESPONSETODATABASEROWS_FIELD_NUMBER = 6;
    private java.util.List<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow> responseToDatabaseRows_;
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    public java.util.List<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow> getResponseToDatabaseRowsList() {
      return responseToDatabaseRows_;
    }
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    public java.util.List<? extends com.errapartengineering.plcengine.PlcCommunication.DatabaseRowOrBuilder> 
        getResponseToDatabaseRowsOrBuilderList() {
      return responseToDatabaseRows_;
    }
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    public int getResponseToDatabaseRowsCount() {
      return responseToDatabaseRows_.size();
    }
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getResponseToDatabaseRows(int index) {
      return responseToDatabaseRows_.get(index);
    }
    /**
     * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
     *
     * <pre>
     ** In response to the query 'QueryRows'. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.DatabaseRowOrBuilder getResponseToDatabaseRowsOrBuilder(
        int index) {
      return responseToDatabaseRows_.get(index);
    }

    // optional .communication.COMMAND Command = 7 [default = NOP];
    public static final int COMMAND_FIELD_NUMBER = 7;
    private com.errapartengineering.plcengine.PlcCommunication.COMMAND command_;
    /**
     * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
     *
     * <pre>
     ** Command, if any. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.COMMAND getCommand() {
      return command_;
    }

    // repeated .communication.RowUser OOBRowUsers = 8;
    public static final int OOBROWUSERS_FIELD_NUMBER = 8;
    private java.util.List<com.errapartengineering.plcengine.PlcCommunication.RowUser> oOBRowUsers_;
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    public java.util.List<com.errapartengineering.plcengine.PlcCommunication.RowUser> getOOBRowUsersList() {
      return oOBRowUsers_;
    }
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    public java.util.List<? extends com.errapartengineering.plcengine.PlcCommunication.RowUserOrBuilder> 
        getOOBRowUsersOrBuilderList() {
      return oOBRowUsers_;
    }
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    public int getOOBRowUsersCount() {
      return oOBRowUsers_.size();
    }
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.RowUser getOOBRowUsers(int index) {
      return oOBRowUsers_.get(index);
    }
    /**
     * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
     *
     * <pre>
     ** List of users/devices to connect to/manage. In the 1st message to the operators. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.RowUserOrBuilder getOOBRowUsersOrBuilder(
        int index) {
      return oOBRowUsers_.get(index);
    }

    // optional int32 SourceId = 9;
    public static final int SOURCEID_FIELD_NUMBER = 9;
    private int sourceId_;
    /**
     * <code>optional int32 SourceId = 9;</code>
     *
     * <pre>
     ** Id of the originating PLC. 
     * </pre>
     */
    public boolean hasSourceId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 SourceId = 9;</code>
     *
     * <pre>
     ** Id of the originating PLC. 
     * </pre>
     */
    public int getSourceId() {
      return sourceId_;
    }

    // optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;
    public static final int RESPONSETOQUERYLATESTROWPLCCONFIGURATION_FIELD_NUMBER = 10;
    private com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration responseToQueryLatestRowPlcConfiguration_;
    /**
     * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
     *
     * <pre>
     ** Admin: In response to QueryLatestRowPlcConfiguration. 
     * </pre>
     */
    public boolean hasResponseToQueryLatestRowPlcConfiguration() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
     *
     * <pre>
     ** Admin: In response to QueryLatestRowPlcConfiguration. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getResponseToQueryLatestRowPlcConfiguration() {
      return responseToQueryLatestRowPlcConfiguration_;
    }

    // optional .communication.IdRange ResponseToDbRangeQuery = 11;
    public static final int RESPONSETODBRANGEQUERY_FIELD_NUMBER = 11;
    private com.errapartengineering.plcengine.PlcCommunication.IdRange responseToDbRangeQuery_;
    /**
     * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
     *
     * <pre>
     ** Response to the DbRangeQuery. 
     * </pre>
     */
    public boolean hasResponseToDbRangeQuery() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
     *
     * <pre>
     ** Response to the DbRangeQuery. 
     * </pre>
     */
    public com.errapartengineering.plcengine.PlcCommunication.IdRange getResponseToDbRangeQuery() {
      return responseToDbRangeQuery_;
    }

    private void initFields() {
      id_ = 0L;
      response_ = com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance();
      oOBDatabaseRow_ = com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance();
      oOBConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance();
      oOBDatabaseRange_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
      responseToDatabaseRows_ = java.util.Collections.emptyList();
      command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
      oOBRowUsers_ = java.util.Collections.emptyList();
      sourceId_ = 0;
      responseToQueryLatestRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
      responseToDbRangeQuery_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt64(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, response_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, oOBDatabaseRow_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, oOBConfiguration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, oOBDatabaseRange_);
      }
      for (int i = 0; i < responseToDatabaseRows_.size(); i++) {
        output.writeMessage(6, responseToDatabaseRows_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(7, command_.getNumber());
      }
      for (int i = 0; i < oOBRowUsers_.size(); i++) {
        output.writeMessage(8, oOBRowUsers_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, sourceId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(10, responseToQueryLatestRowPlcConfiguration_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(11, responseToDbRangeQuery_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, response_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, oOBDatabaseRow_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, oOBConfiguration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, oOBDatabaseRange_);
      }
      for (int i = 0; i < responseToDatabaseRows_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, responseToDatabaseRows_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, command_.getNumber());
      }
      for (int i = 0; i < oOBRowUsers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, oOBRowUsers_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, sourceId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, responseToQueryLatestRowPlcConfiguration_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, responseToDbRangeQuery_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code communication.MessageFromPlc}
     *
     * <pre>
     * TODO: Perhaps better name is 'MessageFromSlave'.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc, Builder>
        implements com.errapartengineering.plcengine.PlcCommunication.MessageFromPlcOrBuilder {
      // Construct using com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        response_ = com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        oOBDatabaseRow_ = com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        oOBConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        oOBDatabaseRange_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        responseToDatabaseRows_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
        bitField0_ = (bitField0_ & ~0x00000040);
        oOBRowUsers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        sourceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        responseToQueryLatestRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000200);
        responseToDbRangeQuery_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc getDefaultInstanceForType() {
        return com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc.getDefaultInstance();
      }

      public com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc build() {
        com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc buildPartial() {
        com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc result = new com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.response_ = response_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.oOBDatabaseRow_ = oOBDatabaseRow_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.oOBConfiguration_ = oOBConfiguration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.oOBDatabaseRange_ = oOBDatabaseRange_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          responseToDatabaseRows_ = java.util.Collections.unmodifiableList(responseToDatabaseRows_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.responseToDatabaseRows_ = responseToDatabaseRows_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.command_ = command_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          oOBRowUsers_ = java.util.Collections.unmodifiableList(oOBRowUsers_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.oOBRowUsers_ = oOBRowUsers_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sourceId_ = sourceId_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.responseToQueryLatestRowPlcConfiguration_ = responseToQueryLatestRowPlcConfiguration_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.responseToDbRangeQuery_ = responseToDbRangeQuery_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc other) {
        if (other == com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasResponse()) {
          mergeResponse(other.getResponse());
        }
        if (other.hasOOBDatabaseRow()) {
          mergeOOBDatabaseRow(other.getOOBDatabaseRow());
        }
        if (other.hasOOBConfiguration()) {
          mergeOOBConfiguration(other.getOOBConfiguration());
        }
        if (other.hasOOBDatabaseRange()) {
          mergeOOBDatabaseRange(other.getOOBDatabaseRange());
        }
        if (!other.responseToDatabaseRows_.isEmpty()) {
          if (responseToDatabaseRows_.isEmpty()) {
            responseToDatabaseRows_ = other.responseToDatabaseRows_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureResponseToDatabaseRowsIsMutable();
            responseToDatabaseRows_.addAll(other.responseToDatabaseRows_);
          }
          
        }
        if (other.hasCommand()) {
          setCommand(other.getCommand());
        }
        if (!other.oOBRowUsers_.isEmpty()) {
          if (oOBRowUsers_.isEmpty()) {
            oOBRowUsers_ = other.oOBRowUsers_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureOOBRowUsersIsMutable();
            oOBRowUsers_.addAll(other.oOBRowUsers_);
          }
          
        }
        if (other.hasSourceId()) {
          setSourceId(other.getSourceId());
        }
        if (other.hasResponseToQueryLatestRowPlcConfiguration()) {
          mergeResponseToQueryLatestRowPlcConfiguration(other.getResponseToQueryLatestRowPlcConfiguration());
        }
        if (other.hasResponseToDbRangeQuery()) {
          mergeResponseToDbRangeQuery(other.getResponseToDbRangeQuery());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.errapartengineering.plcengine.PlcCommunication.MessageFromPlc) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint64 Id = 1;
      private long id_ ;
      /**
       * <code>optional sint64 Id = 1;</code>
       *
       * <pre>
       ** Equals to the corresponding request Id, or unique negative OOB ID. 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint64 Id = 1;</code>
       *
       * <pre>
       ** Equals to the corresponding request Id, or unique negative OOB ID. 
       * </pre>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>optional sint64 Id = 1;</code>
       *
       * <pre>
       ** Equals to the corresponding request Id, or unique negative OOB ID. 
       * </pre>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional sint64 Id = 1;</code>
       *
       * <pre>
       ** Equals to the corresponding request Id, or unique negative OOB ID. 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        
        return this;
      }

      // optional .communication.Response Response = 2;
      private com.errapartengineering.plcengine.PlcCommunication.Response response_ = com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance();
      /**
       * <code>optional .communication.Response Response = 2;</code>
       *
       * <pre>
       ** Response, if any. 
       * </pre>
       */
      public boolean hasResponse() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .communication.Response Response = 2;</code>
       *
       * <pre>
       ** Response, if any. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.Response getResponse() {
        return response_;
      }
      /**
       * <code>optional .communication.Response Response = 2;</code>
       *
       * <pre>
       ** Response, if any. 
       * </pre>
       */
      public Builder setResponse(com.errapartengineering.plcengine.PlcCommunication.Response value) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .communication.Response Response = 2;</code>
       *
       * <pre>
       ** Response, if any. 
       * </pre>
       */
      public Builder setResponse(
          com.errapartengineering.plcengine.PlcCommunication.Response.Builder builderForValue) {
        response_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .communication.Response Response = 2;</code>
       *
       * <pre>
       ** Response, if any. 
       * </pre>
       */
      public Builder mergeResponse(com.errapartengineering.plcengine.PlcCommunication.Response value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            response_ != com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance()) {
          response_ =
            com.errapartengineering.plcengine.PlcCommunication.Response.newBuilder(response_).mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .communication.Response Response = 2;</code>
       *
       * <pre>
       ** Response, if any. 
       * </pre>
       */
      public Builder clearResponse() {
        response_ = com.errapartengineering.plcengine.PlcCommunication.Response.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .communication.DatabaseRow OOBDatabaseRow = 3;
      private com.errapartengineering.plcengine.PlcCommunication.DatabaseRow oOBDatabaseRow_ = com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance();
      /**
       * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
       *
       * <pre>
       ** Out-of-band database rows (signal values). 
       * </pre>
       */
      public boolean hasOOBDatabaseRow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
       *
       * <pre>
       ** Out-of-band database rows (signal values). 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getOOBDatabaseRow() {
        return oOBDatabaseRow_;
      }
      /**
       * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
       *
       * <pre>
       ** Out-of-band database rows (signal values). 
       * </pre>
       */
      public Builder setOOBDatabaseRow(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow value) {
        if (value == null) {
          throw new NullPointerException();
        }
        oOBDatabaseRow_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
       *
       * <pre>
       ** Out-of-band database rows (signal values). 
       * </pre>
       */
      public Builder setOOBDatabaseRow(
          com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.Builder builderForValue) {
        oOBDatabaseRow_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
       *
       * <pre>
       ** Out-of-band database rows (signal values). 
       * </pre>
       */
      public Builder mergeOOBDatabaseRow(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            oOBDatabaseRow_ != com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance()) {
          oOBDatabaseRow_ =
            com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.newBuilder(oOBDatabaseRow_).mergeFrom(value).buildPartial();
        } else {
          oOBDatabaseRow_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .communication.DatabaseRow OOBDatabaseRow = 3;</code>
       *
       * <pre>
       ** Out-of-band database rows (signal values). 
       * </pre>
       */
      public Builder clearOOBDatabaseRow() {
        oOBDatabaseRow_ = com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .communication.Configuration OOBConfiguration = 4;
      private com.errapartengineering.plcengine.PlcCommunication.Configuration oOBConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance();
      /**
       * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
       *
       * <pre>
       ** Out-of-band configuration and/or password. 
       * </pre>
       */
      public boolean hasOOBConfiguration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
       *
       * <pre>
       ** Out-of-band configuration and/or password. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.Configuration getOOBConfiguration() {
        return oOBConfiguration_;
      }
      /**
       * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
       *
       * <pre>
       ** Out-of-band configuration and/or password. 
       * </pre>
       */
      public Builder setOOBConfiguration(com.errapartengineering.plcengine.PlcCommunication.Configuration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        oOBConfiguration_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
       *
       * <pre>
       ** Out-of-band configuration and/or password. 
       * </pre>
       */
      public Builder setOOBConfiguration(
          com.errapartengineering.plcengine.PlcCommunication.Configuration.Builder builderForValue) {
        oOBConfiguration_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
       *
       * <pre>
       ** Out-of-band configuration and/or password. 
       * </pre>
       */
      public Builder mergeOOBConfiguration(com.errapartengineering.plcengine.PlcCommunication.Configuration value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            oOBConfiguration_ != com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance()) {
          oOBConfiguration_ =
            com.errapartengineering.plcengine.PlcCommunication.Configuration.newBuilder(oOBConfiguration_).mergeFrom(value).buildPartial();
        } else {
          oOBConfiguration_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .communication.Configuration OOBConfiguration = 4;</code>
       *
       * <pre>
       ** Out-of-band configuration and/or password. 
       * </pre>
       */
      public Builder clearOOBConfiguration() {
        oOBConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.Configuration.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional .communication.IdRange OOBDatabaseRange = 5;
      private com.errapartengineering.plcengine.PlcCommunication.IdRange oOBDatabaseRange_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
      /**
       * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
       *
       * <pre>
       ** Out-of-band PLC database id range. 
       * </pre>
       */
      public boolean hasOOBDatabaseRange() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
       *
       * <pre>
       ** Out-of-band PLC database id range. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.IdRange getOOBDatabaseRange() {
        return oOBDatabaseRange_;
      }
      /**
       * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
       *
       * <pre>
       ** Out-of-band PLC database id range. 
       * </pre>
       */
      public Builder setOOBDatabaseRange(com.errapartengineering.plcengine.PlcCommunication.IdRange value) {
        if (value == null) {
          throw new NullPointerException();
        }
        oOBDatabaseRange_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
       *
       * <pre>
       ** Out-of-band PLC database id range. 
       * </pre>
       */
      public Builder setOOBDatabaseRange(
          com.errapartengineering.plcengine.PlcCommunication.IdRange.Builder builderForValue) {
        oOBDatabaseRange_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
       *
       * <pre>
       ** Out-of-band PLC database id range. 
       * </pre>
       */
      public Builder mergeOOBDatabaseRange(com.errapartengineering.plcengine.PlcCommunication.IdRange value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            oOBDatabaseRange_ != com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance()) {
          oOBDatabaseRange_ =
            com.errapartengineering.plcengine.PlcCommunication.IdRange.newBuilder(oOBDatabaseRange_).mergeFrom(value).buildPartial();
        } else {
          oOBDatabaseRange_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .communication.IdRange OOBDatabaseRange = 5;</code>
       *
       * <pre>
       ** Out-of-band PLC database id range. 
       * </pre>
       */
      public Builder clearOOBDatabaseRange() {
        oOBDatabaseRange_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;
      private java.util.List<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow> responseToDatabaseRows_ =
        java.util.Collections.emptyList();
      private void ensureResponseToDatabaseRowsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          responseToDatabaseRows_ = new java.util.ArrayList<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow>(responseToDatabaseRows_);
          bitField0_ |= 0x00000020;
         }
      }

      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public java.util.List<com.errapartengineering.plcengine.PlcCommunication.DatabaseRow> getResponseToDatabaseRowsList() {
        return java.util.Collections.unmodifiableList(responseToDatabaseRows_);
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public int getResponseToDatabaseRowsCount() {
        return responseToDatabaseRows_.size();
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.DatabaseRow getResponseToDatabaseRows(int index) {
        return responseToDatabaseRows_.get(index);
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder setResponseToDatabaseRows(
          int index, com.errapartengineering.plcengine.PlcCommunication.DatabaseRow value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder setResponseToDatabaseRows(
          int index, com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.Builder builderForValue) {
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder addResponseToDatabaseRows(com.errapartengineering.plcengine.PlcCommunication.DatabaseRow value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.add(value);

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder addResponseToDatabaseRows(
          int index, com.errapartengineering.plcengine.PlcCommunication.DatabaseRow value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder addResponseToDatabaseRows(
          com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.Builder builderForValue) {
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder addResponseToDatabaseRows(
          int index, com.errapartengineering.plcengine.PlcCommunication.DatabaseRow.Builder builderForValue) {
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder addAllResponseToDatabaseRows(
          java.lang.Iterable<? extends com.errapartengineering.plcengine.PlcCommunication.DatabaseRow> values) {
        ensureResponseToDatabaseRowsIsMutable();
        super.addAll(values, responseToDatabaseRows_);

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder clearResponseToDatabaseRows() {
        responseToDatabaseRows_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);

        return this;
      }
      /**
       * <code>repeated .communication.DatabaseRow ResponseToDatabaseRows = 6;</code>
       *
       * <pre>
       ** In response to the query 'QueryRows'. 
       * </pre>
       */
      public Builder removeResponseToDatabaseRows(int index) {
        ensureResponseToDatabaseRowsIsMutable();
        responseToDatabaseRows_.remove(index);

        return this;
      }

      // optional .communication.COMMAND Command = 7 [default = NOP];
      private com.errapartengineering.plcengine.PlcCommunication.COMMAND command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
      /**
       * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.COMMAND getCommand() {
        return command_;
      }
      /**
       * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public Builder setCommand(com.errapartengineering.plcengine.PlcCommunication.COMMAND value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        command_ = value;
        
        return this;
      }
      /**
       * <code>optional .communication.COMMAND Command = 7 [default = NOP];</code>
       *
       * <pre>
       ** Command, if any. 
       * </pre>
       */
      public Builder clearCommand() {
        bitField0_ = (bitField0_ & ~0x00000040);
        command_ = com.errapartengineering.plcengine.PlcCommunication.COMMAND.NOP;
        
        return this;
      }

      // repeated .communication.RowUser OOBRowUsers = 8;
      private java.util.List<com.errapartengineering.plcengine.PlcCommunication.RowUser> oOBRowUsers_ =
        java.util.Collections.emptyList();
      private void ensureOOBRowUsersIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          oOBRowUsers_ = new java.util.ArrayList<com.errapartengineering.plcengine.PlcCommunication.RowUser>(oOBRowUsers_);
          bitField0_ |= 0x00000080;
         }
      }

      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public java.util.List<com.errapartengineering.plcengine.PlcCommunication.RowUser> getOOBRowUsersList() {
        return java.util.Collections.unmodifiableList(oOBRowUsers_);
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public int getOOBRowUsersCount() {
        return oOBRowUsers_.size();
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.RowUser getOOBRowUsers(int index) {
        return oOBRowUsers_.get(index);
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder setOOBRowUsers(
          int index, com.errapartengineering.plcengine.PlcCommunication.RowUser value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder setOOBRowUsers(
          int index, com.errapartengineering.plcengine.PlcCommunication.RowUser.Builder builderForValue) {
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder addOOBRowUsers(com.errapartengineering.plcengine.PlcCommunication.RowUser value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.add(value);

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder addOOBRowUsers(
          int index, com.errapartengineering.plcengine.PlcCommunication.RowUser value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder addOOBRowUsers(
          com.errapartengineering.plcengine.PlcCommunication.RowUser.Builder builderForValue) {
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder addOOBRowUsers(
          int index, com.errapartengineering.plcengine.PlcCommunication.RowUser.Builder builderForValue) {
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder addAllOOBRowUsers(
          java.lang.Iterable<? extends com.errapartengineering.plcengine.PlcCommunication.RowUser> values) {
        ensureOOBRowUsersIsMutable();
        super.addAll(values, oOBRowUsers_);

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder clearOOBRowUsers() {
        oOBRowUsers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);

        return this;
      }
      /**
       * <code>repeated .communication.RowUser OOBRowUsers = 8;</code>
       *
       * <pre>
       ** List of users/devices to connect to/manage. In the 1st message to the operators. 
       * </pre>
       */
      public Builder removeOOBRowUsers(int index) {
        ensureOOBRowUsersIsMutable();
        oOBRowUsers_.remove(index);

        return this;
      }

      // optional int32 SourceId = 9;
      private int sourceId_ ;
      /**
       * <code>optional int32 SourceId = 9;</code>
       *
       * <pre>
       ** Id of the originating PLC. 
       * </pre>
       */
      public boolean hasSourceId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 SourceId = 9;</code>
       *
       * <pre>
       ** Id of the originating PLC. 
       * </pre>
       */
      public int getSourceId() {
        return sourceId_;
      }
      /**
       * <code>optional int32 SourceId = 9;</code>
       *
       * <pre>
       ** Id of the originating PLC. 
       * </pre>
       */
      public Builder setSourceId(int value) {
        bitField0_ |= 0x00000100;
        sourceId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 SourceId = 9;</code>
       *
       * <pre>
       ** Id of the originating PLC. 
       * </pre>
       */
      public Builder clearSourceId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        sourceId_ = 0;
        
        return this;
      }

      // optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;
      private com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration responseToQueryLatestRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();
      /**
       * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
       *
       * <pre>
       ** Admin: In response to QueryLatestRowPlcConfiguration. 
       * </pre>
       */
      public boolean hasResponseToQueryLatestRowPlcConfiguration() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
       *
       * <pre>
       ** Admin: In response to QueryLatestRowPlcConfiguration. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration getResponseToQueryLatestRowPlcConfiguration() {
        return responseToQueryLatestRowPlcConfiguration_;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
       *
       * <pre>
       ** Admin: In response to QueryLatestRowPlcConfiguration. 
       * </pre>
       */
      public Builder setResponseToQueryLatestRowPlcConfiguration(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        responseToQueryLatestRowPlcConfiguration_ = value;

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
       *
       * <pre>
       ** Admin: In response to QueryLatestRowPlcConfiguration. 
       * </pre>
       */
      public Builder setResponseToQueryLatestRowPlcConfiguration(
          com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.Builder builderForValue) {
        responseToQueryLatestRowPlcConfiguration_ = builderForValue.build();

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
       *
       * <pre>
       ** Admin: In response to QueryLatestRowPlcConfiguration. 
       * </pre>
       */
      public Builder mergeResponseToQueryLatestRowPlcConfiguration(com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration value) {
        if (((bitField0_ & 0x00000200) == 0x00000200) &&
            responseToQueryLatestRowPlcConfiguration_ != com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance()) {
          responseToQueryLatestRowPlcConfiguration_ =
            com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.newBuilder(responseToQueryLatestRowPlcConfiguration_).mergeFrom(value).buildPartial();
        } else {
          responseToQueryLatestRowPlcConfiguration_ = value;
        }

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .communication.RowPlcConfiguration ResponseToQueryLatestRowPlcConfiguration = 10;</code>
       *
       * <pre>
       ** Admin: In response to QueryLatestRowPlcConfiguration. 
       * </pre>
       */
      public Builder clearResponseToQueryLatestRowPlcConfiguration() {
        responseToQueryLatestRowPlcConfiguration_ = com.errapartengineering.plcengine.PlcCommunication.RowPlcConfiguration.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      // optional .communication.IdRange ResponseToDbRangeQuery = 11;
      private com.errapartengineering.plcengine.PlcCommunication.IdRange responseToDbRangeQuery_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();
      /**
       * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
       *
       * <pre>
       ** Response to the DbRangeQuery. 
       * </pre>
       */
      public boolean hasResponseToDbRangeQuery() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
       *
       * <pre>
       ** Response to the DbRangeQuery. 
       * </pre>
       */
      public com.errapartengineering.plcengine.PlcCommunication.IdRange getResponseToDbRangeQuery() {
        return responseToDbRangeQuery_;
      }
      /**
       * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
       *
       * <pre>
       ** Response to the DbRangeQuery. 
       * </pre>
       */
      public Builder setResponseToDbRangeQuery(com.errapartengineering.plcengine.PlcCommunication.IdRange value) {
        if (value == null) {
          throw new NullPointerException();
        }
        responseToDbRangeQuery_ = value;

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
       *
       * <pre>
       ** Response to the DbRangeQuery. 
       * </pre>
       */
      public Builder setResponseToDbRangeQuery(
          com.errapartengineering.plcengine.PlcCommunication.IdRange.Builder builderForValue) {
        responseToDbRangeQuery_ = builderForValue.build();

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
       *
       * <pre>
       ** Response to the DbRangeQuery. 
       * </pre>
       */
      public Builder mergeResponseToDbRangeQuery(com.errapartengineering.plcengine.PlcCommunication.IdRange value) {
        if (((bitField0_ & 0x00000400) == 0x00000400) &&
            responseToDbRangeQuery_ != com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance()) {
          responseToDbRangeQuery_ =
            com.errapartengineering.plcengine.PlcCommunication.IdRange.newBuilder(responseToDbRangeQuery_).mergeFrom(value).buildPartial();
        } else {
          responseToDbRangeQuery_ = value;
        }

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .communication.IdRange ResponseToDbRangeQuery = 11;</code>
       *
       * <pre>
       ** Response to the DbRangeQuery. 
       * </pre>
       */
      public Builder clearResponseToDbRangeQuery() {
        responseToDbRangeQuery_ = com.errapartengineering.plcengine.PlcCommunication.IdRange.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:communication.MessageFromPlc)
    }

    static {
      defaultInstance = new MessageFromPlc(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:communication.MessageFromPlc)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
